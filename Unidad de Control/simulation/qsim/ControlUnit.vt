// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/05/2016 21:59:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlUnit_vlg_sample_tst(
	CLK,
	Word,
	sampler_tx
);
input  CLK;
input [15:0] Word;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or Word)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ControlUnit_vlg_check_tst (
	ARLOAD,
	CarryEn,
	FLAGS,
	IMM,
	MUX_SEL,
	PCINC,
	RdAdd,
	RE,
	read_rom,
	RmAdd,
	RnAdd,
	SEL,
	WE,
	WR,
	ZLOAD_1,
	ZLOAD_2,
	ZLOAD_3,
	sampler_rx
);
input  ARLOAD;
input  CarryEn;
input  FLAGS;
input [31:0] IMM;
input  MUX_SEL;
input  PCINC;
input [3:0] RdAdd;
input  RE;
input  read_rom;
input [3:0] RmAdd;
input [3:0] RnAdd;
input [4:0] SEL;
input  WE;
input  WR;
input  ZLOAD_1;
input  ZLOAD_2;
input  ZLOAD_3;
input sampler_rx;

reg  ARLOAD_expected;
reg  CarryEn_expected;
reg  FLAGS_expected;
reg [31:0] IMM_expected;
reg  MUX_SEL_expected;
reg  PCINC_expected;
reg [3:0] RdAdd_expected;
reg  RE_expected;
reg  read_rom_expected;
reg [3:0] RmAdd_expected;
reg [3:0] RnAdd_expected;
reg [4:0] SEL_expected;
reg  WE_expected;
reg  WR_expected;
reg  ZLOAD_1_expected;
reg  ZLOAD_2_expected;
reg  ZLOAD_3_expected;

reg  ARLOAD_prev;
reg  CarryEn_prev;
reg  FLAGS_prev;
reg [31:0] IMM_prev;
reg  MUX_SEL_prev;
reg  PCINC_prev;
reg [3:0] RdAdd_prev;
reg  RE_prev;
reg  read_rom_prev;
reg [3:0] RmAdd_prev;
reg [3:0] RnAdd_prev;
reg [4:0] SEL_prev;
reg  WE_prev;
reg  WR_prev;
reg  ZLOAD_1_prev;
reg  ZLOAD_2_prev;
reg  ZLOAD_3_prev;

reg  ARLOAD_expected_prev;
reg  FLAGS_expected_prev;
reg [31:0] IMM_expected_prev;
reg  MUX_SEL_expected_prev;
reg  PCINC_expected_prev;
reg [3:0] RdAdd_expected_prev;
reg  RE_expected_prev;
reg  read_rom_expected_prev;
reg [3:0] RmAdd_expected_prev;
reg [3:0] RnAdd_expected_prev;
reg [4:0] SEL_expected_prev;
reg  WE_expected_prev;
reg  WR_expected_prev;
reg  ZLOAD_1_expected_prev;
reg  ZLOAD_2_expected_prev;
reg  ZLOAD_3_expected_prev;

reg  last_ARLOAD_exp;
reg  last_FLAGS_exp;
reg [31:0] last_IMM_exp;
reg  last_MUX_SEL_exp;
reg  last_PCINC_exp;
reg [3:0] last_RdAdd_exp;
reg  last_RE_exp;
reg  last_read_rom_exp;
reg [3:0] last_RmAdd_exp;
reg [3:0] last_RnAdd_exp;
reg [4:0] last_SEL_exp;
reg  last_WE_exp;
reg  last_WR_exp;
reg  last_ZLOAD_1_exp;
reg  last_ZLOAD_2_exp;
reg  last_ZLOAD_3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	ARLOAD_prev = ARLOAD;
	CarryEn_prev = CarryEn;
	FLAGS_prev = FLAGS;
	IMM_prev = IMM;
	MUX_SEL_prev = MUX_SEL;
	PCINC_prev = PCINC;
	RdAdd_prev = RdAdd;
	RE_prev = RE;
	read_rom_prev = read_rom;
	RmAdd_prev = RmAdd;
	RnAdd_prev = RnAdd;
	SEL_prev = SEL;
	WE_prev = WE;
	WR_prev = WR;
	ZLOAD_1_prev = ZLOAD_1;
	ZLOAD_2_prev = ZLOAD_2;
	ZLOAD_3_prev = ZLOAD_3;
end

// update expected /o prevs

always @(trigger)
begin
	ARLOAD_expected_prev = ARLOAD_expected;
	FLAGS_expected_prev = FLAGS_expected;
	IMM_expected_prev = IMM_expected;
	MUX_SEL_expected_prev = MUX_SEL_expected;
	PCINC_expected_prev = PCINC_expected;
	RdAdd_expected_prev = RdAdd_expected;
	RE_expected_prev = RE_expected;
	read_rom_expected_prev = read_rom_expected;
	RmAdd_expected_prev = RmAdd_expected;
	RnAdd_expected_prev = RnAdd_expected;
	SEL_expected_prev = SEL_expected;
	WE_expected_prev = WE_expected;
	WR_expected_prev = WR_expected;
	ZLOAD_1_expected_prev = ZLOAD_1_expected;
	ZLOAD_2_expected_prev = ZLOAD_2_expected;
	ZLOAD_3_expected_prev = ZLOAD_3_expected;
end



// expected ARLOAD
initial
begin
	ARLOAD_expected = 1'bX;
end 

// expected read_rom
initial
begin
	read_rom_expected = 1'bX;
end 

// expected PCINC
initial
begin
	PCINC_expected = 1'bX;
end 
// expected SEL[ 4 ]
initial
begin
	SEL_expected[4] = 1'bX;
end 
// expected SEL[ 3 ]
initial
begin
	SEL_expected[3] = 1'bX;
end 
// expected SEL[ 2 ]
initial
begin
	SEL_expected[2] = 1'bX;
end 
// expected SEL[ 1 ]
initial
begin
	SEL_expected[1] = 1'bX;
end 
// expected SEL[ 0 ]
initial
begin
	SEL_expected[0] = 1'bX;
end 

// expected MUX_SEL
initial
begin
	MUX_SEL_expected = 1'bX;
end 
// expected IMM[ 31 ]
initial
begin
	IMM_expected[31] = 1'bX;
end 
// expected IMM[ 30 ]
initial
begin
	IMM_expected[30] = 1'bX;
end 
// expected IMM[ 29 ]
initial
begin
	IMM_expected[29] = 1'bX;
end 
// expected IMM[ 28 ]
initial
begin
	IMM_expected[28] = 1'bX;
end 
// expected IMM[ 27 ]
initial
begin
	IMM_expected[27] = 1'bX;
end 
// expected IMM[ 26 ]
initial
begin
	IMM_expected[26] = 1'bX;
end 
// expected IMM[ 25 ]
initial
begin
	IMM_expected[25] = 1'bX;
end 
// expected IMM[ 24 ]
initial
begin
	IMM_expected[24] = 1'bX;
end 
// expected IMM[ 23 ]
initial
begin
	IMM_expected[23] = 1'bX;
end 
// expected IMM[ 22 ]
initial
begin
	IMM_expected[22] = 1'bX;
end 
// expected IMM[ 21 ]
initial
begin
	IMM_expected[21] = 1'bX;
end 
// expected IMM[ 20 ]
initial
begin
	IMM_expected[20] = 1'bX;
end 
// expected IMM[ 19 ]
initial
begin
	IMM_expected[19] = 1'bX;
end 
// expected IMM[ 18 ]
initial
begin
	IMM_expected[18] = 1'bX;
end 
// expected IMM[ 17 ]
initial
begin
	IMM_expected[17] = 1'bX;
end 
// expected IMM[ 16 ]
initial
begin
	IMM_expected[16] = 1'bX;
end 
// expected IMM[ 15 ]
initial
begin
	IMM_expected[15] = 1'bX;
end 
// expected IMM[ 14 ]
initial
begin
	IMM_expected[14] = 1'bX;
end 
// expected IMM[ 13 ]
initial
begin
	IMM_expected[13] = 1'bX;
end 
// expected IMM[ 12 ]
initial
begin
	IMM_expected[12] = 1'bX;
end 
// expected IMM[ 11 ]
initial
begin
	IMM_expected[11] = 1'bX;
end 
// expected IMM[ 10 ]
initial
begin
	IMM_expected[10] = 1'bX;
end 
// expected IMM[ 9 ]
initial
begin
	IMM_expected[9] = 1'bX;
end 
// expected IMM[ 8 ]
initial
begin
	IMM_expected[8] = 1'bX;
end 
// expected IMM[ 7 ]
initial
begin
	IMM_expected[7] = 1'bX;
end 
// expected IMM[ 6 ]
initial
begin
	IMM_expected[6] = 1'bX;
end 
// expected IMM[ 5 ]
initial
begin
	IMM_expected[5] = 1'bX;
end 
// expected IMM[ 4 ]
initial
begin
	IMM_expected[4] = 1'bX;
end 
// expected IMM[ 3 ]
initial
begin
	IMM_expected[3] = 1'bX;
end 
// expected IMM[ 2 ]
initial
begin
	IMM_expected[2] = 1'bX;
end 
// expected IMM[ 1 ]
initial
begin
	IMM_expected[1] = 1'bX;
end 
// expected IMM[ 0 ]
initial
begin
	IMM_expected[0] = 1'bX;
end 
// expected RnAdd[ 3 ]
initial
begin
	RnAdd_expected[3] = 1'bX;
end 
// expected RnAdd[ 2 ]
initial
begin
	RnAdd_expected[2] = 1'bX;
end 
// expected RnAdd[ 1 ]
initial
begin
	RnAdd_expected[1] = 1'bX;
end 
// expected RnAdd[ 0 ]
initial
begin
	RnAdd_expected[0] = 1'bX;
end 
// expected RmAdd[ 3 ]
initial
begin
	RmAdd_expected[3] = 1'bX;
end 
// expected RmAdd[ 2 ]
initial
begin
	RmAdd_expected[2] = 1'bX;
end 
// expected RmAdd[ 1 ]
initial
begin
	RmAdd_expected[1] = 1'bX;
end 
// expected RmAdd[ 0 ]
initial
begin
	RmAdd_expected[0] = 1'bX;
end 
// expected RdAdd[ 3 ]
initial
begin
	RdAdd_expected[3] = 1'bX;
end 
// expected RdAdd[ 2 ]
initial
begin
	RdAdd_expected[2] = 1'bX;
end 
// expected RdAdd[ 1 ]
initial
begin
	RdAdd_expected[1] = 1'bX;
end 
// expected RdAdd[ 0 ]
initial
begin
	RdAdd_expected[0] = 1'bX;
end 

// expected FLAGS
initial
begin
	FLAGS_expected = 1'bX;
end 

// expected RE
initial
begin
	RE_expected = 1'bX;
end 

// expected WE
initial
begin
	WE_expected = 1'bX;
end 

// expected WR
initial
begin
	WR_expected = 1'bX;
end 

// expected ZLOAD_1
initial
begin
	ZLOAD_1_expected = 1'bX;
end 

// expected ZLOAD_2
initial
begin
	ZLOAD_2_expected = 1'bX;
end 

// expected ZLOAD_3
initial
begin
	ZLOAD_3_expected = 1'bX;
end 
// generate trigger
always @(ARLOAD_expected or ARLOAD or CarryEn_expected or CarryEn or FLAGS_expected or FLAGS or IMM_expected or IMM or MUX_SEL_expected or MUX_SEL or PCINC_expected or PCINC or RdAdd_expected or RdAdd or RE_expected or RE or read_rom_expected or read_rom or RmAdd_expected or RmAdd or RnAdd_expected or RnAdd or SEL_expected or SEL or WE_expected or WE or WR_expected or WR or ZLOAD_1_expected or ZLOAD_1 or ZLOAD_2_expected or ZLOAD_2 or ZLOAD_3_expected or ZLOAD_3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ARLOAD = %b | expected CarryEn = %b | expected FLAGS = %b | expected IMM = %b | expected MUX_SEL = %b | expected PCINC = %b | expected RdAdd = %b | expected RE = %b | expected read_rom = %b | expected RmAdd = %b | expected RnAdd = %b | expected SEL = %b | expected WE = %b | expected WR = %b | expected ZLOAD_1 = %b | expected ZLOAD_2 = %b | expected ZLOAD_3 = %b | ",ARLOAD_expected_prev,CarryEn_expected_prev,FLAGS_expected_prev,IMM_expected_prev,MUX_SEL_expected_prev,PCINC_expected_prev,RdAdd_expected_prev,RE_expected_prev,read_rom_expected_prev,RmAdd_expected_prev,RnAdd_expected_prev,SEL_expected_prev,WE_expected_prev,WR_expected_prev,ZLOAD_1_expected_prev,ZLOAD_2_expected_prev,ZLOAD_3_expected_prev);
	$display("| real ARLOAD = %b | real CarryEn = %b | real FLAGS = %b | real IMM = %b | real MUX_SEL = %b | real PCINC = %b | real RdAdd = %b | real RE = %b | real read_rom = %b | real RmAdd = %b | real RnAdd = %b | real SEL = %b | real WE = %b | real WR = %b | real ZLOAD_1 = %b | real ZLOAD_2 = %b | real ZLOAD_3 = %b | ",ARLOAD_prev,CarryEn_prev,FLAGS_prev,IMM_prev,MUX_SEL_prev,PCINC_prev,RdAdd_prev,RE_prev,read_rom_prev,RmAdd_prev,RnAdd_prev,SEL_prev,WE_prev,WR_prev,ZLOAD_1_prev,ZLOAD_2_prev,ZLOAD_3_prev);
`endif
	if (
		( ARLOAD_expected_prev !== 1'bx ) && ( ARLOAD_prev !== ARLOAD_expected_prev )
		&& ((ARLOAD_expected_prev !== last_ARLOAD_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ARLOAD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ARLOAD_expected_prev);
		$display ("     Real value = %b", ARLOAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ARLOAD_exp = ARLOAD_expected_prev;
	end
	if (
		( FLAGS_expected_prev !== 1'bx ) && ( FLAGS_prev !== FLAGS_expected_prev )
		&& ((FLAGS_expected_prev !== last_FLAGS_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FLAGS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FLAGS_expected_prev);
		$display ("     Real value = %b", FLAGS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FLAGS_exp = FLAGS_expected_prev;
	end
	if (
		( IMM_expected_prev[0] !== 1'bx ) && ( IMM_prev[0] !== IMM_expected_prev[0] )
		&& ((IMM_expected_prev[0] !== last_IMM_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[0] = IMM_expected_prev[0];
	end
	if (
		( IMM_expected_prev[1] !== 1'bx ) && ( IMM_prev[1] !== IMM_expected_prev[1] )
		&& ((IMM_expected_prev[1] !== last_IMM_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[1] = IMM_expected_prev[1];
	end
	if (
		( IMM_expected_prev[2] !== 1'bx ) && ( IMM_prev[2] !== IMM_expected_prev[2] )
		&& ((IMM_expected_prev[2] !== last_IMM_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[2] = IMM_expected_prev[2];
	end
	if (
		( IMM_expected_prev[3] !== 1'bx ) && ( IMM_prev[3] !== IMM_expected_prev[3] )
		&& ((IMM_expected_prev[3] !== last_IMM_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[3] = IMM_expected_prev[3];
	end
	if (
		( IMM_expected_prev[4] !== 1'bx ) && ( IMM_prev[4] !== IMM_expected_prev[4] )
		&& ((IMM_expected_prev[4] !== last_IMM_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[4] = IMM_expected_prev[4];
	end
	if (
		( IMM_expected_prev[5] !== 1'bx ) && ( IMM_prev[5] !== IMM_expected_prev[5] )
		&& ((IMM_expected_prev[5] !== last_IMM_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[5] = IMM_expected_prev[5];
	end
	if (
		( IMM_expected_prev[6] !== 1'bx ) && ( IMM_prev[6] !== IMM_expected_prev[6] )
		&& ((IMM_expected_prev[6] !== last_IMM_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[6] = IMM_expected_prev[6];
	end
	if (
		( IMM_expected_prev[7] !== 1'bx ) && ( IMM_prev[7] !== IMM_expected_prev[7] )
		&& ((IMM_expected_prev[7] !== last_IMM_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[7] = IMM_expected_prev[7];
	end
	if (
		( IMM_expected_prev[8] !== 1'bx ) && ( IMM_prev[8] !== IMM_expected_prev[8] )
		&& ((IMM_expected_prev[8] !== last_IMM_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[8] = IMM_expected_prev[8];
	end
	if (
		( IMM_expected_prev[9] !== 1'bx ) && ( IMM_prev[9] !== IMM_expected_prev[9] )
		&& ((IMM_expected_prev[9] !== last_IMM_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[9] = IMM_expected_prev[9];
	end
	if (
		( IMM_expected_prev[10] !== 1'bx ) && ( IMM_prev[10] !== IMM_expected_prev[10] )
		&& ((IMM_expected_prev[10] !== last_IMM_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[10] = IMM_expected_prev[10];
	end
	if (
		( IMM_expected_prev[11] !== 1'bx ) && ( IMM_prev[11] !== IMM_expected_prev[11] )
		&& ((IMM_expected_prev[11] !== last_IMM_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[11] = IMM_expected_prev[11];
	end
	if (
		( IMM_expected_prev[12] !== 1'bx ) && ( IMM_prev[12] !== IMM_expected_prev[12] )
		&& ((IMM_expected_prev[12] !== last_IMM_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[12] = IMM_expected_prev[12];
	end
	if (
		( IMM_expected_prev[13] !== 1'bx ) && ( IMM_prev[13] !== IMM_expected_prev[13] )
		&& ((IMM_expected_prev[13] !== last_IMM_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[13] = IMM_expected_prev[13];
	end
	if (
		( IMM_expected_prev[14] !== 1'bx ) && ( IMM_prev[14] !== IMM_expected_prev[14] )
		&& ((IMM_expected_prev[14] !== last_IMM_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[14] = IMM_expected_prev[14];
	end
	if (
		( IMM_expected_prev[15] !== 1'bx ) && ( IMM_prev[15] !== IMM_expected_prev[15] )
		&& ((IMM_expected_prev[15] !== last_IMM_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[15] = IMM_expected_prev[15];
	end
	if (
		( IMM_expected_prev[16] !== 1'bx ) && ( IMM_prev[16] !== IMM_expected_prev[16] )
		&& ((IMM_expected_prev[16] !== last_IMM_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[16] = IMM_expected_prev[16];
	end
	if (
		( IMM_expected_prev[17] !== 1'bx ) && ( IMM_prev[17] !== IMM_expected_prev[17] )
		&& ((IMM_expected_prev[17] !== last_IMM_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[17] = IMM_expected_prev[17];
	end
	if (
		( IMM_expected_prev[18] !== 1'bx ) && ( IMM_prev[18] !== IMM_expected_prev[18] )
		&& ((IMM_expected_prev[18] !== last_IMM_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[18] = IMM_expected_prev[18];
	end
	if (
		( IMM_expected_prev[19] !== 1'bx ) && ( IMM_prev[19] !== IMM_expected_prev[19] )
		&& ((IMM_expected_prev[19] !== last_IMM_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[19] = IMM_expected_prev[19];
	end
	if (
		( IMM_expected_prev[20] !== 1'bx ) && ( IMM_prev[20] !== IMM_expected_prev[20] )
		&& ((IMM_expected_prev[20] !== last_IMM_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[20] = IMM_expected_prev[20];
	end
	if (
		( IMM_expected_prev[21] !== 1'bx ) && ( IMM_prev[21] !== IMM_expected_prev[21] )
		&& ((IMM_expected_prev[21] !== last_IMM_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[21] = IMM_expected_prev[21];
	end
	if (
		( IMM_expected_prev[22] !== 1'bx ) && ( IMM_prev[22] !== IMM_expected_prev[22] )
		&& ((IMM_expected_prev[22] !== last_IMM_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[22] = IMM_expected_prev[22];
	end
	if (
		( IMM_expected_prev[23] !== 1'bx ) && ( IMM_prev[23] !== IMM_expected_prev[23] )
		&& ((IMM_expected_prev[23] !== last_IMM_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[23] = IMM_expected_prev[23];
	end
	if (
		( IMM_expected_prev[24] !== 1'bx ) && ( IMM_prev[24] !== IMM_expected_prev[24] )
		&& ((IMM_expected_prev[24] !== last_IMM_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[24] = IMM_expected_prev[24];
	end
	if (
		( IMM_expected_prev[25] !== 1'bx ) && ( IMM_prev[25] !== IMM_expected_prev[25] )
		&& ((IMM_expected_prev[25] !== last_IMM_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[25] = IMM_expected_prev[25];
	end
	if (
		( IMM_expected_prev[26] !== 1'bx ) && ( IMM_prev[26] !== IMM_expected_prev[26] )
		&& ((IMM_expected_prev[26] !== last_IMM_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[26] = IMM_expected_prev[26];
	end
	if (
		( IMM_expected_prev[27] !== 1'bx ) && ( IMM_prev[27] !== IMM_expected_prev[27] )
		&& ((IMM_expected_prev[27] !== last_IMM_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[27] = IMM_expected_prev[27];
	end
	if (
		( IMM_expected_prev[28] !== 1'bx ) && ( IMM_prev[28] !== IMM_expected_prev[28] )
		&& ((IMM_expected_prev[28] !== last_IMM_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[28] = IMM_expected_prev[28];
	end
	if (
		( IMM_expected_prev[29] !== 1'bx ) && ( IMM_prev[29] !== IMM_expected_prev[29] )
		&& ((IMM_expected_prev[29] !== last_IMM_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[29] = IMM_expected_prev[29];
	end
	if (
		( IMM_expected_prev[30] !== 1'bx ) && ( IMM_prev[30] !== IMM_expected_prev[30] )
		&& ((IMM_expected_prev[30] !== last_IMM_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[30] = IMM_expected_prev[30];
	end
	if (
		( IMM_expected_prev[31] !== 1'bx ) && ( IMM_prev[31] !== IMM_expected_prev[31] )
		&& ((IMM_expected_prev[31] !== last_IMM_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMM[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMM_expected_prev);
		$display ("     Real value = %b", IMM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_IMM_exp[31] = IMM_expected_prev[31];
	end
	if (
		( MUX_SEL_expected_prev !== 1'bx ) && ( MUX_SEL_prev !== MUX_SEL_expected_prev )
		&& ((MUX_SEL_expected_prev !== last_MUX_SEL_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MUX_SEL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MUX_SEL_expected_prev);
		$display ("     Real value = %b", MUX_SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MUX_SEL_exp = MUX_SEL_expected_prev;
	end
	if (
		( PCINC_expected_prev !== 1'bx ) && ( PCINC_prev !== PCINC_expected_prev )
		&& ((PCINC_expected_prev !== last_PCINC_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCINC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCINC_expected_prev);
		$display ("     Real value = %b", PCINC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCINC_exp = PCINC_expected_prev;
	end
	if (
		( RdAdd_expected_prev[0] !== 1'bx ) && ( RdAdd_prev[0] !== RdAdd_expected_prev[0] )
		&& ((RdAdd_expected_prev[0] !== last_RdAdd_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RdAdd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RdAdd_expected_prev);
		$display ("     Real value = %b", RdAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RdAdd_exp[0] = RdAdd_expected_prev[0];
	end
	if (
		( RdAdd_expected_prev[1] !== 1'bx ) && ( RdAdd_prev[1] !== RdAdd_expected_prev[1] )
		&& ((RdAdd_expected_prev[1] !== last_RdAdd_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RdAdd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RdAdd_expected_prev);
		$display ("     Real value = %b", RdAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RdAdd_exp[1] = RdAdd_expected_prev[1];
	end
	if (
		( RdAdd_expected_prev[2] !== 1'bx ) && ( RdAdd_prev[2] !== RdAdd_expected_prev[2] )
		&& ((RdAdd_expected_prev[2] !== last_RdAdd_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RdAdd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RdAdd_expected_prev);
		$display ("     Real value = %b", RdAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RdAdd_exp[2] = RdAdd_expected_prev[2];
	end
	if (
		( RdAdd_expected_prev[3] !== 1'bx ) && ( RdAdd_prev[3] !== RdAdd_expected_prev[3] )
		&& ((RdAdd_expected_prev[3] !== last_RdAdd_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RdAdd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RdAdd_expected_prev);
		$display ("     Real value = %b", RdAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RdAdd_exp[3] = RdAdd_expected_prev[3];
	end
	if (
		( RE_expected_prev !== 1'bx ) && ( RE_prev !== RE_expected_prev )
		&& ((RE_expected_prev !== last_RE_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RE_expected_prev);
		$display ("     Real value = %b", RE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RE_exp = RE_expected_prev;
	end
	if (
		( read_rom_expected_prev !== 1'bx ) && ( read_rom_prev !== read_rom_expected_prev )
		&& ((read_rom_expected_prev !== last_read_rom_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_rom :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_rom_expected_prev);
		$display ("     Real value = %b", read_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_read_rom_exp = read_rom_expected_prev;
	end
	if (
		( RmAdd_expected_prev[0] !== 1'bx ) && ( RmAdd_prev[0] !== RmAdd_expected_prev[0] )
		&& ((RmAdd_expected_prev[0] !== last_RmAdd_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RmAdd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RmAdd_expected_prev);
		$display ("     Real value = %b", RmAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RmAdd_exp[0] = RmAdd_expected_prev[0];
	end
	if (
		( RmAdd_expected_prev[1] !== 1'bx ) && ( RmAdd_prev[1] !== RmAdd_expected_prev[1] )
		&& ((RmAdd_expected_prev[1] !== last_RmAdd_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RmAdd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RmAdd_expected_prev);
		$display ("     Real value = %b", RmAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RmAdd_exp[1] = RmAdd_expected_prev[1];
	end
	if (
		( RmAdd_expected_prev[2] !== 1'bx ) && ( RmAdd_prev[2] !== RmAdd_expected_prev[2] )
		&& ((RmAdd_expected_prev[2] !== last_RmAdd_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RmAdd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RmAdd_expected_prev);
		$display ("     Real value = %b", RmAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RmAdd_exp[2] = RmAdd_expected_prev[2];
	end
	if (
		( RmAdd_expected_prev[3] !== 1'bx ) && ( RmAdd_prev[3] !== RmAdd_expected_prev[3] )
		&& ((RmAdd_expected_prev[3] !== last_RmAdd_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RmAdd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RmAdd_expected_prev);
		$display ("     Real value = %b", RmAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RmAdd_exp[3] = RmAdd_expected_prev[3];
	end
	if (
		( RnAdd_expected_prev[0] !== 1'bx ) && ( RnAdd_prev[0] !== RnAdd_expected_prev[0] )
		&& ((RnAdd_expected_prev[0] !== last_RnAdd_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RnAdd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RnAdd_expected_prev);
		$display ("     Real value = %b", RnAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RnAdd_exp[0] = RnAdd_expected_prev[0];
	end
	if (
		( RnAdd_expected_prev[1] !== 1'bx ) && ( RnAdd_prev[1] !== RnAdd_expected_prev[1] )
		&& ((RnAdd_expected_prev[1] !== last_RnAdd_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RnAdd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RnAdd_expected_prev);
		$display ("     Real value = %b", RnAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RnAdd_exp[1] = RnAdd_expected_prev[1];
	end
	if (
		( RnAdd_expected_prev[2] !== 1'bx ) && ( RnAdd_prev[2] !== RnAdd_expected_prev[2] )
		&& ((RnAdd_expected_prev[2] !== last_RnAdd_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RnAdd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RnAdd_expected_prev);
		$display ("     Real value = %b", RnAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RnAdd_exp[2] = RnAdd_expected_prev[2];
	end
	if (
		( RnAdd_expected_prev[3] !== 1'bx ) && ( RnAdd_prev[3] !== RnAdd_expected_prev[3] )
		&& ((RnAdd_expected_prev[3] !== last_RnAdd_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RnAdd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RnAdd_expected_prev);
		$display ("     Real value = %b", RnAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RnAdd_exp[3] = RnAdd_expected_prev[3];
	end
	if (
		( SEL_expected_prev[0] !== 1'bx ) && ( SEL_prev[0] !== SEL_expected_prev[0] )
		&& ((SEL_expected_prev[0] !== last_SEL_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SEL_exp[0] = SEL_expected_prev[0];
	end
	if (
		( SEL_expected_prev[1] !== 1'bx ) && ( SEL_prev[1] !== SEL_expected_prev[1] )
		&& ((SEL_expected_prev[1] !== last_SEL_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SEL_exp[1] = SEL_expected_prev[1];
	end
	if (
		( SEL_expected_prev[2] !== 1'bx ) && ( SEL_prev[2] !== SEL_expected_prev[2] )
		&& ((SEL_expected_prev[2] !== last_SEL_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SEL_exp[2] = SEL_expected_prev[2];
	end
	if (
		( SEL_expected_prev[3] !== 1'bx ) && ( SEL_prev[3] !== SEL_expected_prev[3] )
		&& ((SEL_expected_prev[3] !== last_SEL_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SEL_exp[3] = SEL_expected_prev[3];
	end
	if (
		( SEL_expected_prev[4] !== 1'bx ) && ( SEL_prev[4] !== SEL_expected_prev[4] )
		&& ((SEL_expected_prev[4] !== last_SEL_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SEL_exp[4] = SEL_expected_prev[4];
	end
	if (
		( WE_expected_prev !== 1'bx ) && ( WE_prev !== WE_expected_prev )
		&& ((WE_expected_prev !== last_WE_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WE_expected_prev);
		$display ("     Real value = %b", WE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_WE_exp = WE_expected_prev;
	end
	if (
		( WR_expected_prev !== 1'bx ) && ( WR_prev !== WR_expected_prev )
		&& ((WR_expected_prev !== last_WR_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_expected_prev);
		$display ("     Real value = %b", WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_WR_exp = WR_expected_prev;
	end
	if (
		( ZLOAD_1_expected_prev !== 1'bx ) && ( ZLOAD_1_prev !== ZLOAD_1_expected_prev )
		&& ((ZLOAD_1_expected_prev !== last_ZLOAD_1_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZLOAD_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZLOAD_1_expected_prev);
		$display ("     Real value = %b", ZLOAD_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ZLOAD_1_exp = ZLOAD_1_expected_prev;
	end
	if (
		( ZLOAD_2_expected_prev !== 1'bx ) && ( ZLOAD_2_prev !== ZLOAD_2_expected_prev )
		&& ((ZLOAD_2_expected_prev !== last_ZLOAD_2_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZLOAD_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZLOAD_2_expected_prev);
		$display ("     Real value = %b", ZLOAD_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_ZLOAD_2_exp = ZLOAD_2_expected_prev;
	end
	if (
		( ZLOAD_3_expected_prev !== 1'bx ) && ( ZLOAD_3_prev !== ZLOAD_3_expected_prev )
		&& ((ZLOAD_3_expected_prev !== last_ZLOAD_3_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZLOAD_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZLOAD_3_expected_prev);
		$display ("     Real value = %b", ZLOAD_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ZLOAD_3_exp = ZLOAD_3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [15:0] Word;
// wires                                               
wire ARLOAD;
wire CarryEn;
wire FLAGS;
wire [31:0] IMM;
wire MUX_SEL;
wire PCINC;
wire [3:0] RdAdd;
wire RE;
wire read_rom;
wire [3:0] RmAdd;
wire [3:0] RnAdd;
wire [4:0] SEL;
wire WE;
wire WR;
wire ZLOAD_1;
wire ZLOAD_2;
wire ZLOAD_3;

wire sampler;                             

// assign statements (if any)                          
ControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.ARLOAD(ARLOAD),
	.CarryEn(CarryEn),
	.CLK(CLK),
	.FLAGS(FLAGS),
	.IMM(IMM),
	.MUX_SEL(MUX_SEL),
	.PCINC(PCINC),
	.RdAdd(RdAdd),
	.RE(RE),
	.read_rom(read_rom),
	.RmAdd(RmAdd),
	.RnAdd(RnAdd),
	.SEL(SEL),
	.WE(WE),
	.Word(Word),
	.WR(WR),
	.ZLOAD_1(ZLOAD_1),
	.ZLOAD_2(ZLOAD_2),
	.ZLOAD_3(ZLOAD_3)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #2500000 1'b1;
	#2500000;
end 
// Word[ 15 ]
initial
begin
	Word[15] = 1'b0;
end 
// Word[ 14 ]
initial
begin
	Word[14] = 1'b1;
end 
// Word[ 13 ]
initial
begin
	Word[13] = 1'b0;
end 
// Word[ 12 ]
initial
begin
	Word[12] = 1'b0;
end 
// Word[ 11 ]
initial
begin
	Word[11] = 1'b0;
end 
// Word[ 10 ]
initial
begin
	Word[10] = 1'b0;
end 
// Word[ 9 ]
initial
begin
	Word[9] = 1'b0;
end 
// Word[ 8 ]
initial
begin
	Word[8] = 1'b1;
end 
// Word[ 7 ]
initial
begin
	Word[7] = 1'b0;
end 
// Word[ 6 ]
initial
begin
	Word[6] = 1'b1;
end 
// Word[ 5 ]
initial
begin
	Word[5] = 1'b1;
	Word[5] = #21760000 1'b0;
	Word[5] = #19200000 1'b1;
	Word[5] = #21760000 1'b0;
	Word[5] = #19840000 1'b1;
end 
// Word[ 4 ]
initial
begin
	Word[4] = 1'b0;
	Word[4] = #2560000 1'b1;
	Word[4] = #19200000 1'b0;
	Word[4] = #19200000 1'b1;
	Word[4] = #41600000 1'b0;
end 
// Word[ 3 ]
initial
begin
	Word[3] = 1'b0;
	Word[3] = #21760000 1'b1;
	Word[3] = #19200000 1'b0;
	Word[3] = #20000000 1'b1;
	Word[3] = #1760000 1'b0;
end 
// Word[ 2 ]
initial
begin
	Word[2] = 1'b0;
	Word[2] = #2560000 1'b1;
	Word[2] = #58400000 1'b0;
end 
// Word[ 1 ]
initial
begin
	Word[1] = 1'b1;
	Word[1] = #2560000 1'b0;
	Word[1] = #19200000 1'b1;
	Word[1] = #39200000 1'b0;
	Word[1] = #1760000 1'b1;
	Word[1] = #19840000 1'b0;
end 
// Word[ 0 ]
initial
begin
	Word[0] = 1'b0;
	Word[0] = #2560000 1'b1;
	Word[0] = #19200000 1'b0;
	Word[0] = #19200000 1'b1;
	Word[0] = #20000000 1'b0;
	Word[0] = #21600000 1'b1;
end 

ControlUnit_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.Word(Word),
	.sampler_tx(sampler)
);

ControlUnit_vlg_check_tst tb_out(
	.ARLOAD(ARLOAD),
	.CarryEn(CarryEn),
	.FLAGS(FLAGS),
	.IMM(IMM),
	.MUX_SEL(MUX_SEL),
	.PCINC(PCINC),
	.RdAdd(RdAdd),
	.RE(RE),
	.read_rom(read_rom),
	.RmAdd(RmAdd),
	.RnAdd(RnAdd),
	.SEL(SEL),
	.WE(WE),
	.WR(WR),
	.ZLOAD_1(ZLOAD_1),
	.ZLOAD_2(ZLOAD_2),
	.ZLOAD_3(ZLOAD_3),
	.sampler_rx(sampler)
);
endmodule

