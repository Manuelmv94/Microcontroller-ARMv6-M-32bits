// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/08/2016 17:27:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_sample_tst(
	CLK,
	FLAGS,
	NZCVin,
	Rdn,
	Rm,
	SEL,
	sampler_tx
);
input  CLK;
input  FLAGS;
input [3:0] NZCVin;
input [31:0] Rdn;
input [31:0] Rm;
input [4:0] SEL;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or FLAGS or NZCVin or Rdn or Rm or SEL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU_vlg_check_tst (
	NZCVout,
	Rd,
	sampler_rx
);
input [3:0] NZCVout;
input [31:0] Rd;
input sampler_rx;

reg [3:0] NZCVout_expected;
reg [31:0] Rd_expected;

reg [3:0] NZCVout_prev;
reg [31:0] Rd_prev;

reg [3:0] NZCVout_expected_prev;
reg [31:0] Rd_expected_prev;

reg [3:0] last_NZCVout_exp;
reg [31:0] last_Rd_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	NZCVout_prev = NZCVout;
	Rd_prev = Rd;
end

// update expected /o prevs

always @(trigger)
begin
	NZCVout_expected_prev = NZCVout_expected;
	Rd_expected_prev = Rd_expected;
end


// expected NZCVout[ 3 ]
initial
begin
	NZCVout_expected[3] = 1'bX;
	NZCVout_expected[3] = #999000 1'b0;
end 
// expected NZCVout[ 2 ]
initial
begin
	NZCVout_expected[2] = 1'bX;
	NZCVout_expected[2] = #999000 1'b0;
end 
// expected NZCVout[ 1 ]
initial
begin
	NZCVout_expected[1] = 1'bX;
	NZCVout_expected[1] = #999000 1'b0;
end 
// expected NZCVout[ 0 ]
initial
begin
	NZCVout_expected[0] = 1'bX;
	NZCVout_expected[0] = #999000 1'b0;
end 
// expected Rd[ 31 ]
initial
begin
	Rd_expected[31] = 1'bX;
end 
// expected Rd[ 30 ]
initial
begin
	Rd_expected[30] = 1'bX;
end 
// expected Rd[ 29 ]
initial
begin
	Rd_expected[29] = 1'bX;
end 
// expected Rd[ 28 ]
initial
begin
	Rd_expected[28] = 1'bX;
end 
// expected Rd[ 27 ]
initial
begin
	Rd_expected[27] = 1'bX;
end 
// expected Rd[ 26 ]
initial
begin
	Rd_expected[26] = 1'bX;
end 
// expected Rd[ 25 ]
initial
begin
	Rd_expected[25] = 1'bX;
end 
// expected Rd[ 24 ]
initial
begin
	Rd_expected[24] = 1'bX;
end 
// expected Rd[ 23 ]
initial
begin
	Rd_expected[23] = 1'bX;
end 
// expected Rd[ 22 ]
initial
begin
	Rd_expected[22] = 1'bX;
end 
// expected Rd[ 21 ]
initial
begin
	Rd_expected[21] = 1'bX;
end 
// expected Rd[ 20 ]
initial
begin
	Rd_expected[20] = 1'bX;
end 
// expected Rd[ 19 ]
initial
begin
	Rd_expected[19] = 1'bX;
end 
// expected Rd[ 18 ]
initial
begin
	Rd_expected[18] = 1'bX;
end 
// expected Rd[ 17 ]
initial
begin
	Rd_expected[17] = 1'bX;
end 
// expected Rd[ 16 ]
initial
begin
	Rd_expected[16] = 1'bX;
end 
// expected Rd[ 15 ]
initial
begin
	Rd_expected[15] = 1'bX;
end 
// expected Rd[ 14 ]
initial
begin
	Rd_expected[14] = 1'bX;
end 
// expected Rd[ 13 ]
initial
begin
	Rd_expected[13] = 1'bX;
end 
// expected Rd[ 12 ]
initial
begin
	Rd_expected[12] = 1'bX;
end 
// expected Rd[ 11 ]
initial
begin
	Rd_expected[11] = 1'bX;
end 
// expected Rd[ 10 ]
initial
begin
	Rd_expected[10] = 1'bX;
end 
// expected Rd[ 9 ]
initial
begin
	Rd_expected[9] = 1'bX;
end 
// expected Rd[ 8 ]
initial
begin
	Rd_expected[8] = 1'bX;
end 
// expected Rd[ 7 ]
initial
begin
	Rd_expected[7] = 1'bX;
end 
// expected Rd[ 6 ]
initial
begin
	Rd_expected[6] = 1'bX;
end 
// expected Rd[ 5 ]
initial
begin
	Rd_expected[5] = 1'bX;
end 
// expected Rd[ 4 ]
initial
begin
	Rd_expected[4] = 1'bX;
end 
// expected Rd[ 3 ]
initial
begin
	Rd_expected[3] = 1'bX;
end 
// expected Rd[ 2 ]
initial
begin
	Rd_expected[2] = 1'bX;
end 
// expected Rd[ 1 ]
initial
begin
	Rd_expected[1] = 1'bX;
end 
// expected Rd[ 0 ]
initial
begin
	Rd_expected[0] = 1'bX;
end 
// generate trigger
always @(NZCVout_expected or NZCVout or Rd_expected or Rd)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected NZCVout = %b | expected Rd = %b | ",NZCVout_expected_prev,Rd_expected_prev);
	$display("| real NZCVout = %b | real Rd = %b | ",NZCVout_prev,Rd_prev);
`endif
	if (
		( NZCVout_expected_prev[0] !== 1'bx ) && ( NZCVout_prev[0] !== NZCVout_expected_prev[0] )
		&& ((NZCVout_expected_prev[0] !== last_NZCVout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZCVout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZCVout_expected_prev);
		$display ("     Real value = %b", NZCVout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_NZCVout_exp[0] = NZCVout_expected_prev[0];
	end
	if (
		( NZCVout_expected_prev[1] !== 1'bx ) && ( NZCVout_prev[1] !== NZCVout_expected_prev[1] )
		&& ((NZCVout_expected_prev[1] !== last_NZCVout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZCVout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZCVout_expected_prev);
		$display ("     Real value = %b", NZCVout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_NZCVout_exp[1] = NZCVout_expected_prev[1];
	end
	if (
		( NZCVout_expected_prev[2] !== 1'bx ) && ( NZCVout_prev[2] !== NZCVout_expected_prev[2] )
		&& ((NZCVout_expected_prev[2] !== last_NZCVout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZCVout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZCVout_expected_prev);
		$display ("     Real value = %b", NZCVout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_NZCVout_exp[2] = NZCVout_expected_prev[2];
	end
	if (
		( NZCVout_expected_prev[3] !== 1'bx ) && ( NZCVout_prev[3] !== NZCVout_expected_prev[3] )
		&& ((NZCVout_expected_prev[3] !== last_NZCVout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZCVout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZCVout_expected_prev);
		$display ("     Real value = %b", NZCVout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_NZCVout_exp[3] = NZCVout_expected_prev[3];
	end
	if (
		( Rd_expected_prev[0] !== 1'bx ) && ( Rd_prev[0] !== Rd_expected_prev[0] )
		&& ((Rd_expected_prev[0] !== last_Rd_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[0] = Rd_expected_prev[0];
	end
	if (
		( Rd_expected_prev[1] !== 1'bx ) && ( Rd_prev[1] !== Rd_expected_prev[1] )
		&& ((Rd_expected_prev[1] !== last_Rd_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[1] = Rd_expected_prev[1];
	end
	if (
		( Rd_expected_prev[2] !== 1'bx ) && ( Rd_prev[2] !== Rd_expected_prev[2] )
		&& ((Rd_expected_prev[2] !== last_Rd_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[2] = Rd_expected_prev[2];
	end
	if (
		( Rd_expected_prev[3] !== 1'bx ) && ( Rd_prev[3] !== Rd_expected_prev[3] )
		&& ((Rd_expected_prev[3] !== last_Rd_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[3] = Rd_expected_prev[3];
	end
	if (
		( Rd_expected_prev[4] !== 1'bx ) && ( Rd_prev[4] !== Rd_expected_prev[4] )
		&& ((Rd_expected_prev[4] !== last_Rd_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[4] = Rd_expected_prev[4];
	end
	if (
		( Rd_expected_prev[5] !== 1'bx ) && ( Rd_prev[5] !== Rd_expected_prev[5] )
		&& ((Rd_expected_prev[5] !== last_Rd_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[5] = Rd_expected_prev[5];
	end
	if (
		( Rd_expected_prev[6] !== 1'bx ) && ( Rd_prev[6] !== Rd_expected_prev[6] )
		&& ((Rd_expected_prev[6] !== last_Rd_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[6] = Rd_expected_prev[6];
	end
	if (
		( Rd_expected_prev[7] !== 1'bx ) && ( Rd_prev[7] !== Rd_expected_prev[7] )
		&& ((Rd_expected_prev[7] !== last_Rd_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[7] = Rd_expected_prev[7];
	end
	if (
		( Rd_expected_prev[8] !== 1'bx ) && ( Rd_prev[8] !== Rd_expected_prev[8] )
		&& ((Rd_expected_prev[8] !== last_Rd_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[8] = Rd_expected_prev[8];
	end
	if (
		( Rd_expected_prev[9] !== 1'bx ) && ( Rd_prev[9] !== Rd_expected_prev[9] )
		&& ((Rd_expected_prev[9] !== last_Rd_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[9] = Rd_expected_prev[9];
	end
	if (
		( Rd_expected_prev[10] !== 1'bx ) && ( Rd_prev[10] !== Rd_expected_prev[10] )
		&& ((Rd_expected_prev[10] !== last_Rd_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[10] = Rd_expected_prev[10];
	end
	if (
		( Rd_expected_prev[11] !== 1'bx ) && ( Rd_prev[11] !== Rd_expected_prev[11] )
		&& ((Rd_expected_prev[11] !== last_Rd_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[11] = Rd_expected_prev[11];
	end
	if (
		( Rd_expected_prev[12] !== 1'bx ) && ( Rd_prev[12] !== Rd_expected_prev[12] )
		&& ((Rd_expected_prev[12] !== last_Rd_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[12] = Rd_expected_prev[12];
	end
	if (
		( Rd_expected_prev[13] !== 1'bx ) && ( Rd_prev[13] !== Rd_expected_prev[13] )
		&& ((Rd_expected_prev[13] !== last_Rd_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[13] = Rd_expected_prev[13];
	end
	if (
		( Rd_expected_prev[14] !== 1'bx ) && ( Rd_prev[14] !== Rd_expected_prev[14] )
		&& ((Rd_expected_prev[14] !== last_Rd_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[14] = Rd_expected_prev[14];
	end
	if (
		( Rd_expected_prev[15] !== 1'bx ) && ( Rd_prev[15] !== Rd_expected_prev[15] )
		&& ((Rd_expected_prev[15] !== last_Rd_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[15] = Rd_expected_prev[15];
	end
	if (
		( Rd_expected_prev[16] !== 1'bx ) && ( Rd_prev[16] !== Rd_expected_prev[16] )
		&& ((Rd_expected_prev[16] !== last_Rd_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[16] = Rd_expected_prev[16];
	end
	if (
		( Rd_expected_prev[17] !== 1'bx ) && ( Rd_prev[17] !== Rd_expected_prev[17] )
		&& ((Rd_expected_prev[17] !== last_Rd_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[17] = Rd_expected_prev[17];
	end
	if (
		( Rd_expected_prev[18] !== 1'bx ) && ( Rd_prev[18] !== Rd_expected_prev[18] )
		&& ((Rd_expected_prev[18] !== last_Rd_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[18] = Rd_expected_prev[18];
	end
	if (
		( Rd_expected_prev[19] !== 1'bx ) && ( Rd_prev[19] !== Rd_expected_prev[19] )
		&& ((Rd_expected_prev[19] !== last_Rd_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[19] = Rd_expected_prev[19];
	end
	if (
		( Rd_expected_prev[20] !== 1'bx ) && ( Rd_prev[20] !== Rd_expected_prev[20] )
		&& ((Rd_expected_prev[20] !== last_Rd_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[20] = Rd_expected_prev[20];
	end
	if (
		( Rd_expected_prev[21] !== 1'bx ) && ( Rd_prev[21] !== Rd_expected_prev[21] )
		&& ((Rd_expected_prev[21] !== last_Rd_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[21] = Rd_expected_prev[21];
	end
	if (
		( Rd_expected_prev[22] !== 1'bx ) && ( Rd_prev[22] !== Rd_expected_prev[22] )
		&& ((Rd_expected_prev[22] !== last_Rd_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[22] = Rd_expected_prev[22];
	end
	if (
		( Rd_expected_prev[23] !== 1'bx ) && ( Rd_prev[23] !== Rd_expected_prev[23] )
		&& ((Rd_expected_prev[23] !== last_Rd_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[23] = Rd_expected_prev[23];
	end
	if (
		( Rd_expected_prev[24] !== 1'bx ) && ( Rd_prev[24] !== Rd_expected_prev[24] )
		&& ((Rd_expected_prev[24] !== last_Rd_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[24] = Rd_expected_prev[24];
	end
	if (
		( Rd_expected_prev[25] !== 1'bx ) && ( Rd_prev[25] !== Rd_expected_prev[25] )
		&& ((Rd_expected_prev[25] !== last_Rd_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[25] = Rd_expected_prev[25];
	end
	if (
		( Rd_expected_prev[26] !== 1'bx ) && ( Rd_prev[26] !== Rd_expected_prev[26] )
		&& ((Rd_expected_prev[26] !== last_Rd_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[26] = Rd_expected_prev[26];
	end
	if (
		( Rd_expected_prev[27] !== 1'bx ) && ( Rd_prev[27] !== Rd_expected_prev[27] )
		&& ((Rd_expected_prev[27] !== last_Rd_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[27] = Rd_expected_prev[27];
	end
	if (
		( Rd_expected_prev[28] !== 1'bx ) && ( Rd_prev[28] !== Rd_expected_prev[28] )
		&& ((Rd_expected_prev[28] !== last_Rd_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[28] = Rd_expected_prev[28];
	end
	if (
		( Rd_expected_prev[29] !== 1'bx ) && ( Rd_prev[29] !== Rd_expected_prev[29] )
		&& ((Rd_expected_prev[29] !== last_Rd_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[29] = Rd_expected_prev[29];
	end
	if (
		( Rd_expected_prev[30] !== 1'bx ) && ( Rd_prev[30] !== Rd_expected_prev[30] )
		&& ((Rd_expected_prev[30] !== last_Rd_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[30] = Rd_expected_prev[30];
	end
	if (
		( Rd_expected_prev[31] !== 1'bx ) && ( Rd_prev[31] !== Rd_expected_prev[31] )
		&& ((Rd_expected_prev[31] !== last_Rd_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rd[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rd_expected_prev);
		$display ("     Real value = %b", Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rd_exp[31] = Rd_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg FLAGS;
reg [3:0] NZCVin;
reg [31:0] Rdn;
reg [31:0] Rm;
reg [4:0] SEL;
// wires                                               
wire [3:0] NZCVout;
wire [31:0] Rd;

wire sampler;                             

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.FLAGS(FLAGS),
	.NZCVin(NZCVin),
	.NZCVout(NZCVout),
	.Rd(Rd),
	.Rdn(Rdn),
	.Rm(Rm),
	.SEL(SEL)
);

// CLK
initial
begin
	repeat(33)
	begin
		CLK = 1'b0;
		CLK = #1500000 1'b1;
		# 1500000;
	end
	CLK = 1'b0;
end 

// FLAGS
initial
begin
	FLAGS = 1'b1;
end 
// NZCVin[ 3 ]
initial
begin
	NZCVin[3] = 1'b0;
end 
// NZCVin[ 2 ]
initial
begin
	NZCVin[2] = 1'b0;
end 
// NZCVin[ 1 ]
initial
begin
	NZCVin[1] = 1'b0;
end 
// NZCVin[ 0 ]
initial
begin
	NZCVin[0] = 1'b0;
end 
// SEL[ 4 ]
initial
begin
	SEL[4] = 1'b1;
end 
// SEL[ 3 ]
initial
begin
	SEL[3] = 1'b0;
end 
// SEL[ 2 ]
initial
begin
	SEL[2] = 1'b0;
end 
// SEL[ 1 ]
initial
begin
	SEL[1] = 1'b1;
end 
// SEL[ 0 ]
initial
begin
	SEL[0] = 1'b0;
end 
// Rdn[ 31 ]
initial
begin
	Rdn[31] = 1'b0;
end 
// Rdn[ 30 ]
initial
begin
	Rdn[30] = 1'b0;
end 
// Rdn[ 29 ]
initial
begin
	Rdn[29] = 1'b1;
	Rdn[29] = #50000000 1'b0;
end 
// Rdn[ 28 ]
initial
begin
	Rdn[28] = 1'b0;
	Rdn[28] = #50000000 1'b1;
end 
// Rdn[ 27 ]
initial
begin
	Rdn[27] = 1'b0;
	Rdn[27] = #50000000 1'b1;
end 
// Rdn[ 26 ]
initial
begin
	Rdn[26] = 1'b1;
	Rdn[26] = #50000000 1'b0;
end 
// Rdn[ 25 ]
initial
begin
	Rdn[25] = 1'b0;
	Rdn[25] = #50000000 1'b1;
end 
// Rdn[ 24 ]
initial
begin
	Rdn[24] = 1'b1;
	Rdn[24] = #50000000 1'b0;
end 
// Rdn[ 23 ]
initial
begin
	Rdn[23] = 1'b1;
end 
// Rdn[ 22 ]
initial
begin
	Rdn[22] = 1'b1;
end 
// Rdn[ 21 ]
initial
begin
	Rdn[21] = 1'b1;
	Rdn[21] = #50000000 1'b0;
end 
// Rdn[ 20 ]
initial
begin
	Rdn[20] = 1'b0;
	Rdn[20] = #50000000 1'b1;
end 
// Rdn[ 19 ]
initial
begin
	Rdn[19] = 1'b0;
	Rdn[19] = #50000000 1'b1;
end 
// Rdn[ 18 ]
initial
begin
	Rdn[18] = 1'b0;
end 
// Rdn[ 17 ]
initial
begin
	Rdn[17] = 1'b1;
end 
// Rdn[ 16 ]
initial
begin
	Rdn[16] = 1'b0;
	Rdn[16] = #50000000 1'b1;
end 
// Rdn[ 15 ]
initial
begin
	Rdn[15] = 1'b1;
end 
// Rdn[ 14 ]
initial
begin
	Rdn[14] = 1'b0;
end 
// Rdn[ 13 ]
initial
begin
	Rdn[13] = 1'b0;
end 
// Rdn[ 12 ]
initial
begin
	Rdn[12] = 1'b1;
end 
// Rdn[ 11 ]
initial
begin
	Rdn[11] = 1'b1;
	Rdn[11] = #50000000 1'b0;
end 
// Rdn[ 10 ]
initial
begin
	Rdn[10] = 1'b1;
end 
// Rdn[ 9 ]
initial
begin
	Rdn[9] = 1'b1;
end 
// Rdn[ 8 ]
initial
begin
	Rdn[8] = 1'b0;
	Rdn[8] = #50000000 1'b1;
end 
// Rdn[ 7 ]
initial
begin
	Rdn[7] = 1'b1;
	Rdn[7] = #50000000 1'b0;
end 
// Rdn[ 6 ]
initial
begin
	Rdn[6] = 1'b1;
end 
// Rdn[ 5 ]
initial
begin
	Rdn[5] = 1'b0;
	Rdn[5] = #50000000 1'b1;
end 
// Rdn[ 4 ]
initial
begin
	Rdn[4] = 1'b0;
	Rdn[4] = #50000000 1'b1;
end 
// Rdn[ 3 ]
initial
begin
	Rdn[3] = 1'b0;
	Rdn[3] = #50000000 1'b1;
end 
// Rdn[ 2 ]
initial
begin
	Rdn[2] = 1'b1;
	Rdn[2] = #50000000 1'b0;
end 
// Rdn[ 1 ]
initial
begin
	Rdn[1] = 1'b0;
	Rdn[1] = #50000000 1'b1;
end 
// Rdn[ 0 ]
initial
begin
	Rdn[0] = 1'b1;
end 
// Rm[ 31 ]
initial
begin
	Rm[31] = 1'b0;
end 
// Rm[ 30 ]
initial
begin
	Rm[30] = 1'b1;
end 
// Rm[ 29 ]
initial
begin
	Rm[29] = 1'b0;
	Rm[29] = #50000000 1'b1;
end 
// Rm[ 28 ]
initial
begin
	Rm[28] = 1'b1;
	Rm[28] = #50000000 1'b0;
end 
// Rm[ 27 ]
initial
begin
	Rm[27] = 1'b1;
end 
// Rm[ 26 ]
initial
begin
	Rm[26] = 1'b1;
end 
// Rm[ 25 ]
initial
begin
	Rm[25] = 1'b0;
	Rm[25] = #50000000 1'b1;
end 
// Rm[ 24 ]
initial
begin
	Rm[24] = 1'b1;
end 
// Rm[ 23 ]
initial
begin
	Rm[23] = 1'b0;
end 
// Rm[ 22 ]
initial
begin
	Rm[22] = 1'b1;
	Rm[22] = #50000000 1'b0;
end 
// Rm[ 21 ]
initial
begin
	Rm[21] = 1'b1;
	Rm[21] = #50000000 1'b0;
end 
// Rm[ 20 ]
initial
begin
	Rm[20] = 1'b1;
end 
// Rm[ 19 ]
initial
begin
	Rm[19] = 1'b1;
end 
// Rm[ 18 ]
initial
begin
	Rm[18] = 1'b1;
end 
// Rm[ 17 ]
initial
begin
	Rm[17] = 1'b1;
	Rm[17] = #50000000 1'b0;
end 
// Rm[ 16 ]
initial
begin
	Rm[16] = 1'b0;
	Rm[16] = #50000000 1'b1;
end 
// Rm[ 15 ]
initial
begin
	Rm[15] = 1'b0;
end 
// Rm[ 14 ]
initial
begin
	Rm[14] = 1'b1;
	Rm[14] = #50000000 1'b0;
end 
// Rm[ 13 ]
initial
begin
	Rm[13] = 1'b1;
end 
// Rm[ 12 ]
initial
begin
	Rm[12] = 1'b0;
end 
// Rm[ 11 ]
initial
begin
	Rm[11] = 1'b1;
	Rm[11] = #50000000 1'b0;
end 
// Rm[ 10 ]
initial
begin
	Rm[10] = 1'b0;
end 
// Rm[ 9 ]
initial
begin
	Rm[9] = 1'b1;
end 
// Rm[ 8 ]
initial
begin
	Rm[8] = 1'b0;
	Rm[8] = #50000000 1'b1;
end 
// Rm[ 7 ]
initial
begin
	Rm[7] = 1'b0;
end 
// Rm[ 6 ]
initial
begin
	Rm[6] = 1'b0;
end 
// Rm[ 5 ]
initial
begin
	Rm[5] = 1'b1;
	Rm[5] = #50000000 1'b0;
end 
// Rm[ 4 ]
initial
begin
	Rm[4] = 1'b0;
	Rm[4] = #50000000 1'b1;
end 
// Rm[ 3 ]
initial
begin
	Rm[3] = 1'b0;
end 
// Rm[ 2 ]
initial
begin
	Rm[2] = 1'b0;
	Rm[2] = #50000000 1'b1;
end 
// Rm[ 1 ]
initial
begin
	Rm[1] = 1'b1;
	Rm[1] = #50000000 1'b0;
end 
// Rm[ 0 ]
initial
begin
	Rm[0] = 1'b0;
	Rm[0] = #50000000 1'b1;
end 

ALU_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.FLAGS(FLAGS),
	.NZCVin(NZCVin),
	.Rdn(Rdn),
	.Rm(Rm),
	.SEL(SEL),
	.sampler_tx(sampler)
);

ALU_vlg_check_tst tb_out(
	.NZCVout(NZCVout),
	.Rd(Rd),
	.sampler_rx(sampler)
);
endmodule

