// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/22/2016 02:43:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Multiplicacion
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Multiplicacion_vlg_sample_tst(
	A,
	B,
	CLK,
	sampler_tx
);
input [31:0] A;
input [31:0] B;
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Multiplicacion_vlg_check_tst (
	Res,
	sampler_rx
);
input [63:0] Res;
input sampler_rx;

reg [63:0] Res_expected;

reg [63:0] Res_prev;

reg [63:0] Res_expected_prev;

reg [63:0] last_Res_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Res_prev = Res;
end

// update expected /o prevs

always @(trigger)
begin
	Res_expected_prev = Res_expected;
end


// expected Res[ 63 ]
initial
begin
	Res_expected[63] = 1'bX;
end 
// expected Res[ 62 ]
initial
begin
	Res_expected[62] = 1'bX;
end 
// expected Res[ 61 ]
initial
begin
	Res_expected[61] = 1'bX;
end 
// expected Res[ 60 ]
initial
begin
	Res_expected[60] = 1'bX;
end 
// expected Res[ 59 ]
initial
begin
	Res_expected[59] = 1'bX;
end 
// expected Res[ 58 ]
initial
begin
	Res_expected[58] = 1'bX;
end 
// expected Res[ 57 ]
initial
begin
	Res_expected[57] = 1'bX;
end 
// expected Res[ 56 ]
initial
begin
	Res_expected[56] = 1'bX;
end 
// expected Res[ 55 ]
initial
begin
	Res_expected[55] = 1'bX;
end 
// expected Res[ 54 ]
initial
begin
	Res_expected[54] = 1'bX;
end 
// expected Res[ 53 ]
initial
begin
	Res_expected[53] = 1'bX;
end 
// expected Res[ 52 ]
initial
begin
	Res_expected[52] = 1'bX;
end 
// expected Res[ 51 ]
initial
begin
	Res_expected[51] = 1'bX;
end 
// expected Res[ 50 ]
initial
begin
	Res_expected[50] = 1'bX;
end 
// expected Res[ 49 ]
initial
begin
	Res_expected[49] = 1'bX;
end 
// expected Res[ 48 ]
initial
begin
	Res_expected[48] = 1'bX;
end 
// expected Res[ 47 ]
initial
begin
	Res_expected[47] = 1'bX;
end 
// expected Res[ 46 ]
initial
begin
	Res_expected[46] = 1'bX;
end 
// expected Res[ 45 ]
initial
begin
	Res_expected[45] = 1'bX;
end 
// expected Res[ 44 ]
initial
begin
	Res_expected[44] = 1'bX;
end 
// expected Res[ 43 ]
initial
begin
	Res_expected[43] = 1'bX;
end 
// expected Res[ 42 ]
initial
begin
	Res_expected[42] = 1'bX;
end 
// expected Res[ 41 ]
initial
begin
	Res_expected[41] = 1'bX;
end 
// expected Res[ 40 ]
initial
begin
	Res_expected[40] = 1'bX;
end 
// expected Res[ 39 ]
initial
begin
	Res_expected[39] = 1'bX;
end 
// expected Res[ 38 ]
initial
begin
	Res_expected[38] = 1'bX;
end 
// expected Res[ 37 ]
initial
begin
	Res_expected[37] = 1'bX;
end 
// expected Res[ 36 ]
initial
begin
	Res_expected[36] = 1'bX;
end 
// expected Res[ 35 ]
initial
begin
	Res_expected[35] = 1'bX;
end 
// expected Res[ 34 ]
initial
begin
	Res_expected[34] = 1'bX;
end 
// expected Res[ 33 ]
initial
begin
	Res_expected[33] = 1'bX;
end 
// expected Res[ 32 ]
initial
begin
	Res_expected[32] = 1'bX;
end 
// expected Res[ 31 ]
initial
begin
	Res_expected[31] = 1'bX;
end 
// expected Res[ 30 ]
initial
begin
	Res_expected[30] = 1'bX;
end 
// expected Res[ 29 ]
initial
begin
	Res_expected[29] = 1'bX;
end 
// expected Res[ 28 ]
initial
begin
	Res_expected[28] = 1'bX;
end 
// expected Res[ 27 ]
initial
begin
	Res_expected[27] = 1'bX;
end 
// expected Res[ 26 ]
initial
begin
	Res_expected[26] = 1'bX;
end 
// expected Res[ 25 ]
initial
begin
	Res_expected[25] = 1'bX;
end 
// expected Res[ 24 ]
initial
begin
	Res_expected[24] = 1'bX;
end 
// expected Res[ 23 ]
initial
begin
	Res_expected[23] = 1'bX;
end 
// expected Res[ 22 ]
initial
begin
	Res_expected[22] = 1'bX;
end 
// expected Res[ 21 ]
initial
begin
	Res_expected[21] = 1'bX;
end 
// expected Res[ 20 ]
initial
begin
	Res_expected[20] = 1'bX;
end 
// expected Res[ 19 ]
initial
begin
	Res_expected[19] = 1'bX;
end 
// expected Res[ 18 ]
initial
begin
	Res_expected[18] = 1'bX;
end 
// expected Res[ 17 ]
initial
begin
	Res_expected[17] = 1'bX;
end 
// expected Res[ 16 ]
initial
begin
	Res_expected[16] = 1'bX;
end 
// expected Res[ 15 ]
initial
begin
	Res_expected[15] = 1'bX;
end 
// expected Res[ 14 ]
initial
begin
	Res_expected[14] = 1'bX;
end 
// expected Res[ 13 ]
initial
begin
	Res_expected[13] = 1'bX;
end 
// expected Res[ 12 ]
initial
begin
	Res_expected[12] = 1'bX;
end 
// expected Res[ 11 ]
initial
begin
	Res_expected[11] = 1'bX;
end 
// expected Res[ 10 ]
initial
begin
	Res_expected[10] = 1'bX;
end 
// expected Res[ 9 ]
initial
begin
	Res_expected[9] = 1'bX;
end 
// expected Res[ 8 ]
initial
begin
	Res_expected[8] = 1'bX;
end 
// expected Res[ 7 ]
initial
begin
	Res_expected[7] = 1'bX;
end 
// expected Res[ 6 ]
initial
begin
	Res_expected[6] = 1'bX;
end 
// expected Res[ 5 ]
initial
begin
	Res_expected[5] = 1'bX;
end 
// expected Res[ 4 ]
initial
begin
	Res_expected[4] = 1'bX;
end 
// expected Res[ 3 ]
initial
begin
	Res_expected[3] = 1'bX;
end 
// expected Res[ 2 ]
initial
begin
	Res_expected[2] = 1'bX;
end 
// expected Res[ 1 ]
initial
begin
	Res_expected[1] = 1'bX;
end 
// expected Res[ 0 ]
initial
begin
	Res_expected[0] = 1'bX;
end 
// generate trigger
always @(Res_expected or Res)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Res = %b | ",Res_expected_prev);
	$display("| real Res = %b | ",Res_prev);
`endif
	if (
		( Res_expected_prev[0] !== 1'bx ) && ( Res_prev[0] !== Res_expected_prev[0] )
		&& ((Res_expected_prev[0] !== last_Res_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[0] = Res_expected_prev[0];
	end
	if (
		( Res_expected_prev[1] !== 1'bx ) && ( Res_prev[1] !== Res_expected_prev[1] )
		&& ((Res_expected_prev[1] !== last_Res_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[1] = Res_expected_prev[1];
	end
	if (
		( Res_expected_prev[2] !== 1'bx ) && ( Res_prev[2] !== Res_expected_prev[2] )
		&& ((Res_expected_prev[2] !== last_Res_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[2] = Res_expected_prev[2];
	end
	if (
		( Res_expected_prev[3] !== 1'bx ) && ( Res_prev[3] !== Res_expected_prev[3] )
		&& ((Res_expected_prev[3] !== last_Res_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[3] = Res_expected_prev[3];
	end
	if (
		( Res_expected_prev[4] !== 1'bx ) && ( Res_prev[4] !== Res_expected_prev[4] )
		&& ((Res_expected_prev[4] !== last_Res_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[4] = Res_expected_prev[4];
	end
	if (
		( Res_expected_prev[5] !== 1'bx ) && ( Res_prev[5] !== Res_expected_prev[5] )
		&& ((Res_expected_prev[5] !== last_Res_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[5] = Res_expected_prev[5];
	end
	if (
		( Res_expected_prev[6] !== 1'bx ) && ( Res_prev[6] !== Res_expected_prev[6] )
		&& ((Res_expected_prev[6] !== last_Res_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[6] = Res_expected_prev[6];
	end
	if (
		( Res_expected_prev[7] !== 1'bx ) && ( Res_prev[7] !== Res_expected_prev[7] )
		&& ((Res_expected_prev[7] !== last_Res_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[7] = Res_expected_prev[7];
	end
	if (
		( Res_expected_prev[8] !== 1'bx ) && ( Res_prev[8] !== Res_expected_prev[8] )
		&& ((Res_expected_prev[8] !== last_Res_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[8] = Res_expected_prev[8];
	end
	if (
		( Res_expected_prev[9] !== 1'bx ) && ( Res_prev[9] !== Res_expected_prev[9] )
		&& ((Res_expected_prev[9] !== last_Res_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[9] = Res_expected_prev[9];
	end
	if (
		( Res_expected_prev[10] !== 1'bx ) && ( Res_prev[10] !== Res_expected_prev[10] )
		&& ((Res_expected_prev[10] !== last_Res_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[10] = Res_expected_prev[10];
	end
	if (
		( Res_expected_prev[11] !== 1'bx ) && ( Res_prev[11] !== Res_expected_prev[11] )
		&& ((Res_expected_prev[11] !== last_Res_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[11] = Res_expected_prev[11];
	end
	if (
		( Res_expected_prev[12] !== 1'bx ) && ( Res_prev[12] !== Res_expected_prev[12] )
		&& ((Res_expected_prev[12] !== last_Res_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[12] = Res_expected_prev[12];
	end
	if (
		( Res_expected_prev[13] !== 1'bx ) && ( Res_prev[13] !== Res_expected_prev[13] )
		&& ((Res_expected_prev[13] !== last_Res_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[13] = Res_expected_prev[13];
	end
	if (
		( Res_expected_prev[14] !== 1'bx ) && ( Res_prev[14] !== Res_expected_prev[14] )
		&& ((Res_expected_prev[14] !== last_Res_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[14] = Res_expected_prev[14];
	end
	if (
		( Res_expected_prev[15] !== 1'bx ) && ( Res_prev[15] !== Res_expected_prev[15] )
		&& ((Res_expected_prev[15] !== last_Res_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[15] = Res_expected_prev[15];
	end
	if (
		( Res_expected_prev[16] !== 1'bx ) && ( Res_prev[16] !== Res_expected_prev[16] )
		&& ((Res_expected_prev[16] !== last_Res_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[16] = Res_expected_prev[16];
	end
	if (
		( Res_expected_prev[17] !== 1'bx ) && ( Res_prev[17] !== Res_expected_prev[17] )
		&& ((Res_expected_prev[17] !== last_Res_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[17] = Res_expected_prev[17];
	end
	if (
		( Res_expected_prev[18] !== 1'bx ) && ( Res_prev[18] !== Res_expected_prev[18] )
		&& ((Res_expected_prev[18] !== last_Res_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[18] = Res_expected_prev[18];
	end
	if (
		( Res_expected_prev[19] !== 1'bx ) && ( Res_prev[19] !== Res_expected_prev[19] )
		&& ((Res_expected_prev[19] !== last_Res_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[19] = Res_expected_prev[19];
	end
	if (
		( Res_expected_prev[20] !== 1'bx ) && ( Res_prev[20] !== Res_expected_prev[20] )
		&& ((Res_expected_prev[20] !== last_Res_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[20] = Res_expected_prev[20];
	end
	if (
		( Res_expected_prev[21] !== 1'bx ) && ( Res_prev[21] !== Res_expected_prev[21] )
		&& ((Res_expected_prev[21] !== last_Res_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[21] = Res_expected_prev[21];
	end
	if (
		( Res_expected_prev[22] !== 1'bx ) && ( Res_prev[22] !== Res_expected_prev[22] )
		&& ((Res_expected_prev[22] !== last_Res_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[22] = Res_expected_prev[22];
	end
	if (
		( Res_expected_prev[23] !== 1'bx ) && ( Res_prev[23] !== Res_expected_prev[23] )
		&& ((Res_expected_prev[23] !== last_Res_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[23] = Res_expected_prev[23];
	end
	if (
		( Res_expected_prev[24] !== 1'bx ) && ( Res_prev[24] !== Res_expected_prev[24] )
		&& ((Res_expected_prev[24] !== last_Res_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[24] = Res_expected_prev[24];
	end
	if (
		( Res_expected_prev[25] !== 1'bx ) && ( Res_prev[25] !== Res_expected_prev[25] )
		&& ((Res_expected_prev[25] !== last_Res_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[25] = Res_expected_prev[25];
	end
	if (
		( Res_expected_prev[26] !== 1'bx ) && ( Res_prev[26] !== Res_expected_prev[26] )
		&& ((Res_expected_prev[26] !== last_Res_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[26] = Res_expected_prev[26];
	end
	if (
		( Res_expected_prev[27] !== 1'bx ) && ( Res_prev[27] !== Res_expected_prev[27] )
		&& ((Res_expected_prev[27] !== last_Res_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[27] = Res_expected_prev[27];
	end
	if (
		( Res_expected_prev[28] !== 1'bx ) && ( Res_prev[28] !== Res_expected_prev[28] )
		&& ((Res_expected_prev[28] !== last_Res_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[28] = Res_expected_prev[28];
	end
	if (
		( Res_expected_prev[29] !== 1'bx ) && ( Res_prev[29] !== Res_expected_prev[29] )
		&& ((Res_expected_prev[29] !== last_Res_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[29] = Res_expected_prev[29];
	end
	if (
		( Res_expected_prev[30] !== 1'bx ) && ( Res_prev[30] !== Res_expected_prev[30] )
		&& ((Res_expected_prev[30] !== last_Res_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[30] = Res_expected_prev[30];
	end
	if (
		( Res_expected_prev[31] !== 1'bx ) && ( Res_prev[31] !== Res_expected_prev[31] )
		&& ((Res_expected_prev[31] !== last_Res_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[31] = Res_expected_prev[31];
	end
	if (
		( Res_expected_prev[32] !== 1'bx ) && ( Res_prev[32] !== Res_expected_prev[32] )
		&& ((Res_expected_prev[32] !== last_Res_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[32] = Res_expected_prev[32];
	end
	if (
		( Res_expected_prev[33] !== 1'bx ) && ( Res_prev[33] !== Res_expected_prev[33] )
		&& ((Res_expected_prev[33] !== last_Res_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[33] = Res_expected_prev[33];
	end
	if (
		( Res_expected_prev[34] !== 1'bx ) && ( Res_prev[34] !== Res_expected_prev[34] )
		&& ((Res_expected_prev[34] !== last_Res_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[34] = Res_expected_prev[34];
	end
	if (
		( Res_expected_prev[35] !== 1'bx ) && ( Res_prev[35] !== Res_expected_prev[35] )
		&& ((Res_expected_prev[35] !== last_Res_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[35] = Res_expected_prev[35];
	end
	if (
		( Res_expected_prev[36] !== 1'bx ) && ( Res_prev[36] !== Res_expected_prev[36] )
		&& ((Res_expected_prev[36] !== last_Res_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[36] = Res_expected_prev[36];
	end
	if (
		( Res_expected_prev[37] !== 1'bx ) && ( Res_prev[37] !== Res_expected_prev[37] )
		&& ((Res_expected_prev[37] !== last_Res_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[37] = Res_expected_prev[37];
	end
	if (
		( Res_expected_prev[38] !== 1'bx ) && ( Res_prev[38] !== Res_expected_prev[38] )
		&& ((Res_expected_prev[38] !== last_Res_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[38] = Res_expected_prev[38];
	end
	if (
		( Res_expected_prev[39] !== 1'bx ) && ( Res_prev[39] !== Res_expected_prev[39] )
		&& ((Res_expected_prev[39] !== last_Res_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[39] = Res_expected_prev[39];
	end
	if (
		( Res_expected_prev[40] !== 1'bx ) && ( Res_prev[40] !== Res_expected_prev[40] )
		&& ((Res_expected_prev[40] !== last_Res_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[40] = Res_expected_prev[40];
	end
	if (
		( Res_expected_prev[41] !== 1'bx ) && ( Res_prev[41] !== Res_expected_prev[41] )
		&& ((Res_expected_prev[41] !== last_Res_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[41] = Res_expected_prev[41];
	end
	if (
		( Res_expected_prev[42] !== 1'bx ) && ( Res_prev[42] !== Res_expected_prev[42] )
		&& ((Res_expected_prev[42] !== last_Res_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[42] = Res_expected_prev[42];
	end
	if (
		( Res_expected_prev[43] !== 1'bx ) && ( Res_prev[43] !== Res_expected_prev[43] )
		&& ((Res_expected_prev[43] !== last_Res_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[43] = Res_expected_prev[43];
	end
	if (
		( Res_expected_prev[44] !== 1'bx ) && ( Res_prev[44] !== Res_expected_prev[44] )
		&& ((Res_expected_prev[44] !== last_Res_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[44] = Res_expected_prev[44];
	end
	if (
		( Res_expected_prev[45] !== 1'bx ) && ( Res_prev[45] !== Res_expected_prev[45] )
		&& ((Res_expected_prev[45] !== last_Res_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[45] = Res_expected_prev[45];
	end
	if (
		( Res_expected_prev[46] !== 1'bx ) && ( Res_prev[46] !== Res_expected_prev[46] )
		&& ((Res_expected_prev[46] !== last_Res_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[46] = Res_expected_prev[46];
	end
	if (
		( Res_expected_prev[47] !== 1'bx ) && ( Res_prev[47] !== Res_expected_prev[47] )
		&& ((Res_expected_prev[47] !== last_Res_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[47] = Res_expected_prev[47];
	end
	if (
		( Res_expected_prev[48] !== 1'bx ) && ( Res_prev[48] !== Res_expected_prev[48] )
		&& ((Res_expected_prev[48] !== last_Res_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[48] = Res_expected_prev[48];
	end
	if (
		( Res_expected_prev[49] !== 1'bx ) && ( Res_prev[49] !== Res_expected_prev[49] )
		&& ((Res_expected_prev[49] !== last_Res_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[49] = Res_expected_prev[49];
	end
	if (
		( Res_expected_prev[50] !== 1'bx ) && ( Res_prev[50] !== Res_expected_prev[50] )
		&& ((Res_expected_prev[50] !== last_Res_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[50] = Res_expected_prev[50];
	end
	if (
		( Res_expected_prev[51] !== 1'bx ) && ( Res_prev[51] !== Res_expected_prev[51] )
		&& ((Res_expected_prev[51] !== last_Res_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[51] = Res_expected_prev[51];
	end
	if (
		( Res_expected_prev[52] !== 1'bx ) && ( Res_prev[52] !== Res_expected_prev[52] )
		&& ((Res_expected_prev[52] !== last_Res_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[52] = Res_expected_prev[52];
	end
	if (
		( Res_expected_prev[53] !== 1'bx ) && ( Res_prev[53] !== Res_expected_prev[53] )
		&& ((Res_expected_prev[53] !== last_Res_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[53] = Res_expected_prev[53];
	end
	if (
		( Res_expected_prev[54] !== 1'bx ) && ( Res_prev[54] !== Res_expected_prev[54] )
		&& ((Res_expected_prev[54] !== last_Res_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[54] = Res_expected_prev[54];
	end
	if (
		( Res_expected_prev[55] !== 1'bx ) && ( Res_prev[55] !== Res_expected_prev[55] )
		&& ((Res_expected_prev[55] !== last_Res_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[55] = Res_expected_prev[55];
	end
	if (
		( Res_expected_prev[56] !== 1'bx ) && ( Res_prev[56] !== Res_expected_prev[56] )
		&& ((Res_expected_prev[56] !== last_Res_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[56] = Res_expected_prev[56];
	end
	if (
		( Res_expected_prev[57] !== 1'bx ) && ( Res_prev[57] !== Res_expected_prev[57] )
		&& ((Res_expected_prev[57] !== last_Res_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[57] = Res_expected_prev[57];
	end
	if (
		( Res_expected_prev[58] !== 1'bx ) && ( Res_prev[58] !== Res_expected_prev[58] )
		&& ((Res_expected_prev[58] !== last_Res_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[58] = Res_expected_prev[58];
	end
	if (
		( Res_expected_prev[59] !== 1'bx ) && ( Res_prev[59] !== Res_expected_prev[59] )
		&& ((Res_expected_prev[59] !== last_Res_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[59] = Res_expected_prev[59];
	end
	if (
		( Res_expected_prev[60] !== 1'bx ) && ( Res_prev[60] !== Res_expected_prev[60] )
		&& ((Res_expected_prev[60] !== last_Res_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[60] = Res_expected_prev[60];
	end
	if (
		( Res_expected_prev[61] !== 1'bx ) && ( Res_prev[61] !== Res_expected_prev[61] )
		&& ((Res_expected_prev[61] !== last_Res_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[61] = Res_expected_prev[61];
	end
	if (
		( Res_expected_prev[62] !== 1'bx ) && ( Res_prev[62] !== Res_expected_prev[62] )
		&& ((Res_expected_prev[62] !== last_Res_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[62] = Res_expected_prev[62];
	end
	if (
		( Res_expected_prev[63] !== 1'bx ) && ( Res_prev[63] !== Res_expected_prev[63] )
		&& ((Res_expected_prev[63] !== last_Res_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Res_exp[63] = Res_expected_prev[63];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Multiplicacion_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg [31:0] B;
reg CLK;
// wires                                               
wire [63:0] Res;

wire sampler;                             

// assign statements (if any)                          
Multiplicacion i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CLK(CLK),
	.Res(Res)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #500000 1'b1;
	#500000;
end 
// A[ 31 ]
initial
begin
	A[31] = 1'b1;
	A[31] = #6000000 1'b0;
	A[31] = #3000000 1'b1;
	A[31] = #9000000 1'b0;
	A[31] = #9000000 1'b1;
	A[31] = #3000000 1'b0;
	A[31] = #3000000 1'b1;
	A[31] = #3000000 1'b0;
	A[31] = #3000000 1'b1;
	A[31] = #9000000 1'b0;
	A[31] = #9000000 1'b1;
	A[31] = #3000000 1'b0;
	A[31] = #6000000 1'b1;
	A[31] = #6000000 1'b0;
	A[31] = #6000000 1'b1;
	A[31] = #3000000 1'b0;
	A[31] = #6000000 1'b1;
	A[31] = #6000000 1'b0;
	A[31] = #3000000 1'b1;
	A[31] = #3000000 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b1;
	A[30] = #6000000 1'b0;
	A[30] = #12000000 1'b1;
	A[30] = #3000000 1'b0;
	A[30] = #3000000 1'b1;
	A[30] = #12000000 1'b0;
	A[30] = #3000000 1'b1;
	A[30] = #3000000 1'b0;
	A[30] = #9000000 1'b1;
	A[30] = #3000000 1'b0;
	A[30] = #3000000 1'b1;
	A[30] = #9000000 1'b0;
	A[30] = #3000000 1'b1;
	A[30] = #3000000 1'b0;
	A[30] = #3000000 1'b1;
	A[30] = #3000000 1'b0;
	A[30] = #6000000 1'b1;
	A[30] = #3000000 1'b0;
	A[30] = #3000000 1'b1;
	A[30] = #3000000 1'b0;
	A[30] = #3000000 1'b1;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b0;
	A[29] = #3000000 1'b1;
	A[29] = #6000000 1'b0;
	A[29] = #6000000 1'b1;
	A[29] = #9000000 1'b0;
	A[29] = #3000000 1'b1;
	A[29] = #3000000 1'b0;
	A[29] = #3000000 1'b1;
	A[29] = #3000000 1'b0;
	A[29] = #9000000 1'b1;
	A[29] = #6000000 1'b0;
	A[29] = #12000000 1'b1;
	A[29] = #3000000 1'b0;
	A[29] = #3000000 1'b1;
	A[29] = #15000000 1'b0;
	A[29] = #9000000 1'b1;
	A[29] = #3000000 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b0;
	A[28] = #3000000 1'b1;
	A[28] = #6000000 1'b0;
	A[28] = #3000000 1'b1;
	A[28] = #3000000 1'b0;
	A[28] = #3000000 1'b1;
	A[28] = #6000000 1'b0;
	A[28] = #3000000 1'b1;
	A[28] = #9000000 1'b0;
	A[28] = #6000000 1'b1;
	A[28] = #27000000 1'b0;
	A[28] = #3000000 1'b1;
	A[28] = #3000000 1'b0;
	A[28] = #3000000 1'b1;
	A[28] = #3000000 1'b0;
	A[28] = #9000000 1'b1;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b1;
	A[27] = #3000000 1'b0;
	A[27] = #6000000 1'b1;
	A[27] = #15000000 1'b0;
	A[27] = #9000000 1'b1;
	A[27] = #6000000 1'b0;
	A[27] = #6000000 1'b1;
	A[27] = #21000000 1'b0;
	A[27] = #9000000 1'b1;
	A[27] = #3000000 1'b0;
	A[27] = #3000000 1'b1;
	A[27] = #3000000 1'b0;
	A[27] = #3000000 1'b1;
	A[27] = #3000000 1'b0;
	A[27] = #3000000 1'b1;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
	A[26] = #3000000 1'b1;
	A[26] = #9000000 1'b0;
	A[26] = #6000000 1'b1;
	A[26] = #6000000 1'b0;
	A[26] = #9000000 1'b1;
	A[26] = #3000000 1'b0;
	A[26] = #12000000 1'b1;
	A[26] = #3000000 1'b0;
	A[26] = #15000000 1'b1;
	A[26] = #6000000 1'b0;
	A[26] = #3000000 1'b1;
	A[26] = #3000000 1'b0;
	A[26] = #12000000 1'b1;
	A[26] = #3000000 1'b0;
	A[26] = #3000000 1'b1;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
	A[25] = #3000000 1'b1;
	A[25] = #3000000 1'b0;
	A[25] = #6000000 1'b1;
	A[25] = #6000000 1'b0;
	A[25] = #6000000 1'b1;
	A[25] = #12000000 1'b0;
	A[25] = #3000000 1'b1;
	A[25] = #3000000 1'b0;
	A[25] = #6000000 1'b1;
	A[25] = #18000000 1'b0;
	A[25] = #3000000 1'b1;
	A[25] = #15000000 1'b0;
	A[25] = #3000000 1'b1;
	A[25] = #6000000 1'b0;
	A[25] = #6000000 1'b1;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b0;
	A[24] = #15000000 1'b1;
	A[24] = #3000000 1'b0;
	A[24] = #6000000 1'b1;
	A[24] = #9000000 1'b0;
	A[24] = #6000000 1'b1;
	A[24] = #6000000 1'b0;
	A[24] = #6000000 1'b1;
	A[24] = #12000000 1'b0;
	A[24] = #3000000 1'b1;
	A[24] = #12000000 1'b0;
	A[24] = #3000000 1'b1;
	A[24] = #15000000 1'b0;
	A[24] = #3000000 1'b1;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b1;
	A[23] = #3000000 1'b0;
	A[23] = #6000000 1'b1;
	A[23] = #6000000 1'b0;
	A[23] = #3000000 1'b1;
	A[23] = #15000000 1'b0;
	A[23] = #6000000 1'b1;
	A[23] = #24000000 1'b0;
	A[23] = #3000000 1'b1;
	A[23] = #3000000 1'b0;
	A[23] = #3000000 1'b1;
	A[23] = #9000000 1'b0;
	A[23] = #15000000 1'b1;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b0;
	A[22] = #3000000 1'b1;
	A[22] = #3000000 1'b0;
	A[22] = #3000000 1'b1;
	A[22] = #9000000 1'b0;
	A[22] = #6000000 1'b1;
	A[22] = #3000000 1'b0;
	A[22] = #6000000 1'b1;
	A[22] = #9000000 1'b0;
	A[22] = #18000000 1'b1;
	A[22] = #15000000 1'b0;
	A[22] = #9000000 1'b1;
	A[22] = #3000000 1'b0;
	A[22] = #6000000 1'b1;
	A[22] = #3000000 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b1;
	A[21] = #12000000 1'b0;
	A[21] = #3000000 1'b1;
	A[21] = #3000000 1'b0;
	A[21] = #3000000 1'b1;
	A[21] = #3000000 1'b0;
	A[21] = #9000000 1'b1;
	A[21] = #12000000 1'b0;
	A[21] = #6000000 1'b1;
	A[21] = #3000000 1'b0;
	A[21] = #6000000 1'b1;
	A[21] = #3000000 1'b0;
	A[21] = #9000000 1'b1;
	A[21] = #3000000 1'b0;
	A[21] = #6000000 1'b1;
	A[21] = #6000000 1'b0;
	A[21] = #3000000 1'b1;
	A[21] = #6000000 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b0;
	A[20] = #3000000 1'b1;
	A[20] = #21000000 1'b0;
	A[20] = #12000000 1'b1;
	A[20] = #12000000 1'b0;
	A[20] = #6000000 1'b1;
	A[20] = #3000000 1'b0;
	A[20] = #6000000 1'b1;
	A[20] = #3000000 1'b0;
	A[20] = #3000000 1'b1;
	A[20] = #3000000 1'b0;
	A[20] = #9000000 1'b1;
	A[20] = #3000000 1'b0;
	A[20] = #3000000 1'b1;
	A[20] = #6000000 1'b0;
	A[20] = #6000000 1'b1;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
	A[19] = #3000000 1'b1;
	A[19] = #15000000 1'b0;
	A[19] = #3000000 1'b1;
	A[19] = #6000000 1'b0;
	A[19] = #3000000 1'b1;
	A[19] = #6000000 1'b0;
	A[19] = #3000000 1'b1;
	A[19] = #15000000 1'b0;
	A[19] = #9000000 1'b1;
	A[19] = #9000000 1'b0;
	A[19] = #6000000 1'b1;
	A[19] = #3000000 1'b0;
	A[19] = #9000000 1'b1;
	A[19] = #3000000 1'b0;
	A[19] = #6000000 1'b1;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b0;
	A[18] = #3000000 1'b1;
	A[18] = #6000000 1'b0;
	A[18] = #6000000 1'b1;
	A[18] = #9000000 1'b0;
	A[18] = #3000000 1'b1;
	A[18] = #9000000 1'b0;
	A[18] = #12000000 1'b1;
	A[18] = #3000000 1'b0;
	A[18] = #3000000 1'b1;
	A[18] = #3000000 1'b0;
	A[18] = #3000000 1'b1;
	A[18] = #3000000 1'b0;
	A[18] = #15000000 1'b1;
	A[18] = #3000000 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
	A[17] = #9000000 1'b1;
	A[17] = #6000000 1'b0;
	A[17] = #3000000 1'b1;
	A[17] = #3000000 1'b0;
	A[17] = #9000000 1'b1;
	A[17] = #3000000 1'b0;
	A[17] = #3000000 1'b1;
	A[17] = #6000000 1'b0;
	A[17] = #27000000 1'b1;
	A[17] = #6000000 1'b0;
	A[17] = #3000000 1'b1;
	A[17] = #3000000 1'b0;
	A[17] = #12000000 1'b1;
	A[17] = #3000000 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b1;
	A[16] = #6000000 1'b0;
	A[16] = #3000000 1'b1;
	A[16] = #6000000 1'b0;
	A[16] = #3000000 1'b1;
	A[16] = #3000000 1'b0;
	A[16] = #6000000 1'b1;
	A[16] = #3000000 1'b0;
	A[16] = #6000000 1'b1;
	A[16] = #3000000 1'b0;
	A[16] = #6000000 1'b1;
	A[16] = #3000000 1'b0;
	A[16] = #6000000 1'b1;
	A[16] = #3000000 1'b0;
	A[16] = #3000000 1'b1;
	A[16] = #3000000 1'b0;
	A[16] = #3000000 1'b1;
	A[16] = #3000000 1'b0;
	A[16] = #3000000 1'b1;
	A[16] = #3000000 1'b0;
	A[16] = #3000000 1'b1;
	A[16] = #6000000 1'b0;
	A[16] = #3000000 1'b1;
	A[16] = #3000000 1'b0;
	A[16] = #3000000 1'b1;
	A[16] = #3000000 1'b0;
	A[16] = #3000000 1'b1;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b1;
	A[15] = #3000000 1'b0;
	A[15] = #3000000 1'b1;
	A[15] = #9000000 1'b0;
	A[15] = #12000000 1'b1;
	A[15] = #3000000 1'b0;
	A[15] = #3000000 1'b1;
	A[15] = #6000000 1'b0;
	A[15] = #3000000 1'b1;
	A[15] = #6000000 1'b0;
	A[15] = #6000000 1'b1;
	A[15] = #6000000 1'b0;
	A[15] = #12000000 1'b1;
	A[15] = #6000000 1'b0;
	A[15] = #3000000 1'b1;
	A[15] = #9000000 1'b0;
	A[15] = #3000000 1'b1;
	A[15] = #3000000 1'b0;
	A[15] = #3000000 1'b1;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
	A[14] = #6000000 1'b1;
	A[14] = #3000000 1'b0;
	A[14] = #3000000 1'b1;
	A[14] = #6000000 1'b0;
	A[14] = #6000000 1'b1;
	A[14] = #3000000 1'b0;
	A[14] = #6000000 1'b1;
	A[14] = #6000000 1'b0;
	A[14] = #3000000 1'b1;
	A[14] = #6000000 1'b0;
	A[14] = #15000000 1'b1;
	A[14] = #3000000 1'b0;
	A[14] = #6000000 1'b1;
	A[14] = #3000000 1'b0;
	A[14] = #3000000 1'b1;
	A[14] = #6000000 1'b0;
	A[14] = #6000000 1'b1;
	A[14] = #6000000 1'b0;
	A[14] = #3000000 1'b1;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b1;
	A[13] = #12000000 1'b0;
	A[13] = #6000000 1'b1;
	A[13] = #3000000 1'b0;
	A[13] = #3000000 1'b1;
	A[13] = #3000000 1'b0;
	A[13] = #6000000 1'b1;
	A[13] = #6000000 1'b0;
	A[13] = #3000000 1'b1;
	A[13] = #9000000 1'b0;
	A[13] = #12000000 1'b1;
	A[13] = #9000000 1'b0;
	A[13] = #3000000 1'b1;
	A[13] = #12000000 1'b0;
	A[13] = #3000000 1'b1;
	A[13] = #6000000 1'b0;
	A[13] = #3000000 1'b1;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b1;
	A[12] = #3000000 1'b0;
	A[12] = #3000000 1'b1;
	A[12] = #3000000 1'b0;
	A[12] = #3000000 1'b1;
	A[12] = #3000000 1'b0;
	A[12] = #3000000 1'b1;
	A[12] = #6000000 1'b0;
	A[12] = #6000000 1'b1;
	A[12] = #9000000 1'b0;
	A[12] = #12000000 1'b1;
	A[12] = #3000000 1'b0;
	A[12] = #6000000 1'b1;
	A[12] = #3000000 1'b0;
	A[12] = #3000000 1'b1;
	A[12] = #6000000 1'b0;
	A[12] = #3000000 1'b1;
	A[12] = #6000000 1'b0;
	A[12] = #3000000 1'b1;
	A[12] = #3000000 1'b0;
	A[12] = #3000000 1'b1;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
	A[11] = #9000000 1'b1;
	A[11] = #6000000 1'b0;
	A[11] = #9000000 1'b1;
	A[11] = #6000000 1'b0;
	A[11] = #24000000 1'b1;
	A[11] = #3000000 1'b0;
	A[11] = #3000000 1'b1;
	A[11] = #6000000 1'b0;
	A[11] = #3000000 1'b1;
	A[11] = #3000000 1'b0;
	A[11] = #6000000 1'b1;
	A[11] = #3000000 1'b0;
	A[11] = #6000000 1'b1;
	A[11] = #3000000 1'b0;
	A[11] = #3000000 1'b1;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
	A[10] = #6000000 1'b1;
	A[10] = #12000000 1'b0;
	A[10] = #9000000 1'b1;
	A[10] = #12000000 1'b0;
	A[10] = #9000000 1'b1;
	A[10] = #3000000 1'b0;
	A[10] = #3000000 1'b1;
	A[10] = #6000000 1'b0;
	A[10] = #3000000 1'b1;
	A[10] = #3000000 1'b0;
	A[10] = #9000000 1'b1;
	A[10] = #3000000 1'b0;
	A[10] = #9000000 1'b1;
	A[10] = #3000000 1'b0;
	A[10] = #3000000 1'b1;
	A[10] = #3000000 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
	A[9] = #18000000 1'b1;
	A[9] = #3000000 1'b0;
	A[9] = #6000000 1'b1;
	A[9] = #3000000 1'b0;
	A[9] = #3000000 1'b1;
	A[9] = #6000000 1'b0;
	A[9] = #6000000 1'b1;
	A[9] = #3000000 1'b0;
	A[9] = #3000000 1'b1;
	A[9] = #3000000 1'b0;
	A[9] = #3000000 1'b1;
	A[9] = #6000000 1'b0;
	A[9] = #6000000 1'b1;
	A[9] = #6000000 1'b0;
	A[9] = #3000000 1'b1;
	A[9] = #3000000 1'b0;
	A[9] = #15000000 1'b1;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b1;
	A[8] = #3000000 1'b0;
	A[8] = #6000000 1'b1;
	A[8] = #3000000 1'b0;
	A[8] = #42000000 1'b1;
	A[8] = #3000000 1'b0;
	A[8] = #3000000 1'b1;
	A[8] = #6000000 1'b0;
	A[8] = #3000000 1'b1;
	A[8] = #3000000 1'b0;
	A[8] = #3000000 1'b1;
	A[8] = #3000000 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
	A[7] = #6000000 1'b0;
	A[7] = #3000000 1'b1;
	A[7] = #6000000 1'b0;
	A[7] = #9000000 1'b1;
	A[7] = #3000000 1'b0;
	A[7] = #3000000 1'b1;
	A[7] = #3000000 1'b0;
	A[7] = #3000000 1'b1;
	A[7] = #3000000 1'b0;
	A[7] = #15000000 1'b1;
	A[7] = #3000000 1'b0;
	A[7] = #6000000 1'b1;
	A[7] = #24000000 1'b0;
	A[7] = #6000000 1'b1;
	A[7] = #6000000 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
	A[6] = #6000000 1'b0;
	A[6] = #3000000 1'b1;
	A[6] = #6000000 1'b0;
	A[6] = #3000000 1'b1;
	A[6] = #3000000 1'b0;
	A[6] = #15000000 1'b1;
	A[6] = #3000000 1'b0;
	A[6] = #9000000 1'b1;
	A[6] = #9000000 1'b0;
	A[6] = #3000000 1'b1;
	A[6] = #3000000 1'b0;
	A[6] = #6000000 1'b1;
	A[6] = #6000000 1'b0;
	A[6] = #6000000 1'b1;
	A[6] = #3000000 1'b0;
	A[6] = #3000000 1'b1;
	A[6] = #6000000 1'b0;
	A[6] = #3000000 1'b1;
	A[6] = #3000000 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #3000000 1'b1;
	A[5] = #3000000 1'b0;
	A[5] = #3000000 1'b1;
	A[5] = #15000000 1'b0;
	A[5] = #3000000 1'b1;
	A[5] = #3000000 1'b0;
	A[5] = #3000000 1'b1;
	A[5] = #3000000 1'b0;
	A[5] = #6000000 1'b1;
	A[5] = #3000000 1'b0;
	A[5] = #12000000 1'b1;
	A[5] = #9000000 1'b0;
	A[5] = #6000000 1'b1;
	A[5] = #3000000 1'b0;
	A[5] = #3000000 1'b1;
	A[5] = #12000000 1'b0;
	A[5] = #6000000 1'b1;
	A[5] = #3000000 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #6000000 1'b1;
	A[4] = #3000000 1'b0;
	A[4] = #6000000 1'b1;
	A[4] = #9000000 1'b0;
	A[4] = #6000000 1'b1;
	A[4] = #9000000 1'b0;
	A[4] = #6000000 1'b1;
	A[4] = #3000000 1'b0;
	A[4] = #3000000 1'b1;
	A[4] = #3000000 1'b0;
	A[4] = #3000000 1'b1;
	A[4] = #3000000 1'b0;
	A[4] = #12000000 1'b1;
	A[4] = #6000000 1'b0;
	A[4] = #15000000 1'b1;
	A[4] = #3000000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
	A[3] = #6000000 1'b0;
	A[3] = #3000000 1'b1;
	A[3] = #3000000 1'b0;
	A[3] = #15000000 1'b1;
	A[3] = #3000000 1'b0;
	A[3] = #6000000 1'b1;
	A[3] = #3000000 1'b0;
	A[3] = #6000000 1'b1;
	A[3] = #3000000 1'b0;
	A[3] = #9000000 1'b1;
	A[3] = #9000000 1'b0;
	A[3] = #3000000 1'b1;
	A[3] = #9000000 1'b0;
	A[3] = #15000000 1'b1;
	A[3] = #3000000 1'b0;
	A[3] = #3000000 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #6000000 1'b0;
	A[2] = #6000000 1'b1;
	A[2] = #3000000 1'b0;
	A[2] = #3000000 1'b1;
	A[2] = #3000000 1'b0;
	A[2] = #3000000 1'b1;
	A[2] = #12000000 1'b0;
	A[2] = #9000000 1'b1;
	A[2] = #6000000 1'b0;
	A[2] = #6000000 1'b1;
	A[2] = #3000000 1'b0;
	A[2] = #12000000 1'b1;
	A[2] = #12000000 1'b0;
	A[2] = #6000000 1'b1;
	A[2] = #3000000 1'b0;
	A[2] = #6000000 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
	A[1] = #6000000 1'b0;
	A[1] = #3000000 1'b1;
	A[1] = #6000000 1'b0;
	A[1] = #9000000 1'b1;
	A[1] = #3000000 1'b0;
	A[1] = #6000000 1'b1;
	A[1] = #3000000 1'b0;
	A[1] = #6000000 1'b1;
	A[1] = #18000000 1'b0;
	A[1] = #3000000 1'b1;
	A[1] = #12000000 1'b0;
	A[1] = #9000000 1'b1;
	A[1] = #3000000 1'b0;
	A[1] = #3000000 1'b1;
	A[1] = #3000000 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #3000000 1'b1;
	A[0] = #3000000 1'b0;
	A[0] = #3000000 1'b1;
	A[0] = #9000000 1'b0;
	A[0] = #3000000 1'b1;
	A[0] = #15000000 1'b0;
	A[0] = #3000000 1'b1;
	A[0] = #3000000 1'b0;
	A[0] = #3000000 1'b1;
	A[0] = #9000000 1'b0;
	A[0] = #9000000 1'b1;
	A[0] = #12000000 1'b0;
	A[0] = #3000000 1'b1;
	A[0] = #6000000 1'b0;
	A[0] = #3000000 1'b1;
	A[0] = #3000000 1'b0;
	A[0] = #9000000 1'b1;
end 
// B[ 31 ]
initial
begin
	B[31] = 1'b1;
	B[31] = #6000000 1'b0;
	B[31] = #6000000 1'b1;
	B[31] = #9000000 1'b0;
	B[31] = #6000000 1'b1;
	B[31] = #15000000 1'b0;
	B[31] = #3000000 1'b1;
	B[31] = #6000000 1'b0;
	B[31] = #3000000 1'b1;
	B[31] = #3000000 1'b0;
	B[31] = #3000000 1'b1;
	B[31] = #9000000 1'b0;
	B[31] = #9000000 1'b1;
	B[31] = #3000000 1'b0;
	B[31] = #6000000 1'b1;
	B[31] = #6000000 1'b0;
	B[31] = #3000000 1'b1;
end 
// B[ 30 ]
initial
begin
	B[30] = 1'b0;
	B[30] = #3000000 1'b1;
	B[30] = #3000000 1'b0;
	B[30] = #3000000 1'b1;
	B[30] = #6000000 1'b0;
	B[30] = #3000000 1'b1;
	B[30] = #6000000 1'b0;
	B[30] = #9000000 1'b1;
	B[30] = #3000000 1'b0;
	B[30] = #3000000 1'b1;
	B[30] = #6000000 1'b0;
	B[30] = #9000000 1'b1;
	B[30] = #3000000 1'b0;
	B[30] = #3000000 1'b1;
	B[30] = #9000000 1'b0;
	B[30] = #3000000 1'b1;
	B[30] = #9000000 1'b0;
	B[30] = #6000000 1'b1;
	B[30] = #6000000 1'b0;
	B[30] = #3000000 1'b1;
end 
// B[ 29 ]
initial
begin
	B[29] = 1'b1;
	B[29] = #12000000 1'b0;
	B[29] = #6000000 1'b1;
	B[29] = #15000000 1'b0;
	B[29] = #12000000 1'b1;
	B[29] = #3000000 1'b0;
	B[29] = #3000000 1'b1;
	B[29] = #3000000 1'b0;
	B[29] = #3000000 1'b1;
	B[29] = #3000000 1'b0;
	B[29] = #3000000 1'b1;
	B[29] = #3000000 1'b0;
	B[29] = #9000000 1'b1;
	B[29] = #3000000 1'b0;
	B[29] = #9000000 1'b1;
	B[29] = #9000000 1'b0;
	B[29] = #3000000 1'b1;
end 
// B[ 28 ]
initial
begin
	B[28] = 1'b0;
	B[28] = #6000000 1'b1;
	B[28] = #9000000 1'b0;
	B[28] = #6000000 1'b1;
	B[28] = #9000000 1'b0;
	B[28] = #15000000 1'b1;
	B[28] = #6000000 1'b0;
	B[28] = #3000000 1'b1;
	B[28] = #6000000 1'b0;
	B[28] = #3000000 1'b1;
	B[28] = #6000000 1'b0;
	B[28] = #6000000 1'b1;
	B[28] = #3000000 1'b0;
	B[28] = #3000000 1'b1;
	B[28] = #9000000 1'b0;
	B[28] = #9000000 1'b1;
end 
// B[ 27 ]
initial
begin
	B[27] = 1'b1;
	B[27] = #6000000 1'b0;
	B[27] = #3000000 1'b1;
	B[27] = #9000000 1'b0;
	B[27] = #9000000 1'b1;
	B[27] = #21000000 1'b0;
	B[27] = #9000000 1'b1;
	B[27] = #3000000 1'b0;
	B[27] = #9000000 1'b1;
	B[27] = #18000000 1'b0;
	B[27] = #3000000 1'b1;
	B[27] = #6000000 1'b0;
	B[27] = #3000000 1'b1;
end 
// B[ 26 ]
initial
begin
	B[26] = 1'b0;
	B[26] = #3000000 1'b1;
	B[26] = #6000000 1'b0;
	B[26] = #9000000 1'b1;
	B[26] = #6000000 1'b0;
	B[26] = #6000000 1'b1;
	B[26] = #3000000 1'b0;
	B[26] = #9000000 1'b1;
	B[26] = #3000000 1'b0;
	B[26] = #3000000 1'b1;
	B[26] = #3000000 1'b0;
	B[26] = #9000000 1'b1;
	B[26] = #3000000 1'b0;
	B[26] = #3000000 1'b1;
	B[26] = #6000000 1'b0;
	B[26] = #3000000 1'b1;
	B[26] = #6000000 1'b0;
	B[26] = #3000000 1'b1;
	B[26] = #3000000 1'b0;
	B[26] = #6000000 1'b1;
	B[26] = #3000000 1'b0;
end 
// B[ 25 ]
initial
begin
	B[25] = 1'b1;
	B[25] = #3000000 1'b0;
	B[25] = #9000000 1'b1;
	B[25] = #3000000 1'b0;
	B[25] = #12000000 1'b1;
	B[25] = #3000000 1'b0;
	B[25] = #3000000 1'b1;
	B[25] = #3000000 1'b0;
	B[25] = #3000000 1'b1;
	B[25] = #6000000 1'b0;
	B[25] = #9000000 1'b1;
	B[25] = #3000000 1'b0;
	B[25] = #3000000 1'b1;
	B[25] = #3000000 1'b0;
	B[25] = #3000000 1'b1;
	B[25] = #3000000 1'b0;
	B[25] = #3000000 1'b1;
	B[25] = #9000000 1'b0;
	B[25] = #9000000 1'b1;
	B[25] = #3000000 1'b0;
end 
// B[ 24 ]
initial
begin
	B[24] = 1'b1;
	B[24] = #3000000 1'b0;
	B[24] = #6000000 1'b1;
	B[24] = #9000000 1'b0;
	B[24] = #6000000 1'b1;
	B[24] = #3000000 1'b0;
	B[24] = #3000000 1'b1;
	B[24] = #3000000 1'b0;
	B[24] = #3000000 1'b1;
	B[24] = #6000000 1'b0;
	B[24] = #6000000 1'b1;
	B[24] = #9000000 1'b0;
	B[24] = #18000000 1'b1;
	B[24] = #21000000 1'b0;
end 
// B[ 23 ]
initial
begin
	B[23] = 1'b0;
	B[23] = #3000000 1'b1;
	B[23] = #6000000 1'b0;
	B[23] = #3000000 1'b1;
	B[23] = #3000000 1'b0;
	B[23] = #3000000 1'b1;
	B[23] = #6000000 1'b0;
	B[23] = #9000000 1'b1;
	B[23] = #3000000 1'b0;
	B[23] = #3000000 1'b1;
	B[23] = #3000000 1'b0;
	B[23] = #3000000 1'b1;
	B[23] = #6000000 1'b0;
	B[23] = #18000000 1'b1;
	B[23] = #18000000 1'b0;
	B[23] = #6000000 1'b1;
	B[23] = #3000000 1'b0;
end 
// B[ 22 ]
initial
begin
	B[22] = 1'b1;
	B[22] = #12000000 1'b0;
	B[22] = #21000000 1'b1;
	B[22] = #3000000 1'b0;
	B[22] = #12000000 1'b1;
	B[22] = #12000000 1'b0;
	B[22] = #3000000 1'b1;
	B[22] = #3000000 1'b0;
	B[22] = #3000000 1'b1;
	B[22] = #3000000 1'b0;
	B[22] = #6000000 1'b1;
	B[22] = #3000000 1'b0;
	B[22] = #3000000 1'b1;
	B[22] = #3000000 1'b0;
	B[22] = #12000000 1'b1;
end 
// B[ 21 ]
initial
begin
	B[21] = 1'b0;
	B[21] = #3000000 1'b1;
	B[21] = #9000000 1'b0;
	B[21] = #12000000 1'b1;
	B[21] = #6000000 1'b0;
	B[21] = #3000000 1'b1;
	B[21] = #3000000 1'b0;
	B[21] = #3000000 1'b1;
	B[21] = #3000000 1'b0;
	B[21] = #3000000 1'b1;
	B[21] = #3000000 1'b0;
	B[21] = #6000000 1'b1;
	B[21] = #6000000 1'b0;
	B[21] = #18000000 1'b1;
	B[21] = #6000000 1'b0;
	B[21] = #15000000 1'b1;
end 
// B[ 20 ]
initial
begin
	B[20] = 1'b1;
	B[20] = #15000000 1'b0;
	B[20] = #6000000 1'b1;
	B[20] = #3000000 1'b0;
	B[20] = #18000000 1'b1;
	B[20] = #9000000 1'b0;
	B[20] = #6000000 1'b1;
	B[20] = #6000000 1'b0;
	B[20] = #3000000 1'b1;
	B[20] = #6000000 1'b0;
	B[20] = #3000000 1'b1;
	B[20] = #6000000 1'b0;
	B[20] = #15000000 1'b1;
	B[20] = #3000000 1'b0;
end 
// B[ 19 ]
initial
begin
	B[19] = 1'b1;
	B[19] = #3000000 1'b0;
	B[19] = #3000000 1'b1;
	B[19] = #6000000 1'b0;
	B[19] = #3000000 1'b1;
	B[19] = #6000000 1'b0;
	B[19] = #3000000 1'b1;
	B[19] = #3000000 1'b0;
	B[19] = #3000000 1'b1;
	B[19] = #3000000 1'b0;
	B[19] = #6000000 1'b1;
	B[19] = #9000000 1'b0;
	B[19] = #15000000 1'b1;
	B[19] = #3000000 1'b0;
	B[19] = #6000000 1'b1;
	B[19] = #9000000 1'b0;
	B[19] = #3000000 1'b1;
	B[19] = #3000000 1'b0;
	B[19] = #3000000 1'b1;
	B[19] = #3000000 1'b0;
end 
// B[ 18 ]
initial
begin
	B[18] = 1'b1;
	B[18] = #6000000 1'b0;
	B[18] = #3000000 1'b1;
	B[18] = #3000000 1'b0;
	B[18] = #15000000 1'b1;
	B[18] = #6000000 1'b0;
	B[18] = #3000000 1'b1;
	B[18] = #3000000 1'b0;
	B[18] = #9000000 1'b1;
	B[18] = #3000000 1'b0;
	B[18] = #3000000 1'b1;
	B[18] = #6000000 1'b0;
	B[18] = #6000000 1'b1;
	B[18] = #3000000 1'b0;
	B[18] = #3000000 1'b1;
	B[18] = #9000000 1'b0;
	B[18] = #6000000 1'b1;
	B[18] = #6000000 1'b0;
	B[18] = #3000000 1'b1;
end 
// B[ 17 ]
initial
begin
	B[17] = 1'b1;
	B[17] = #9000000 1'b0;
	B[17] = #3000000 1'b1;
	B[17] = #3000000 1'b0;
	B[17] = #9000000 1'b1;
	B[17] = #6000000 1'b0;
	B[17] = #3000000 1'b1;
	B[17] = #6000000 1'b0;
	B[17] = #15000000 1'b1;
	B[17] = #9000000 1'b0;
	B[17] = #3000000 1'b1;
	B[17] = #6000000 1'b0;
	B[17] = #9000000 1'b1;
	B[17] = #3000000 1'b0;
	B[17] = #9000000 1'b1;
	B[17] = #3000000 1'b0;
end 
// B[ 16 ]
initial
begin
	B[16] = 1'b1;
	B[16] = #3000000 1'b0;
	B[16] = #6000000 1'b1;
	B[16] = #6000000 1'b0;
	B[16] = #3000000 1'b1;
	B[16] = #9000000 1'b0;
	B[16] = #3000000 1'b1;
	B[16] = #9000000 1'b0;
	B[16] = #6000000 1'b1;
	B[16] = #12000000 1'b0;
	B[16] = #6000000 1'b1;
	B[16] = #9000000 1'b0;
	B[16] = #6000000 1'b1;
	B[16] = #12000000 1'b0;
	B[16] = #3000000 1'b1;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b1;
	B[15] = #3000000 1'b0;
	B[15] = #3000000 1'b1;
	B[15] = #9000000 1'b0;
	B[15] = #6000000 1'b1;
	B[15] = #6000000 1'b0;
	B[15] = #3000000 1'b1;
	B[15] = #3000000 1'b0;
	B[15] = #6000000 1'b1;
	B[15] = #6000000 1'b0;
	B[15] = #6000000 1'b1;
	B[15] = #3000000 1'b0;
	B[15] = #3000000 1'b1;
	B[15] = #3000000 1'b0;
	B[15] = #3000000 1'b1;
	B[15] = #6000000 1'b0;
	B[15] = #3000000 1'b1;
	B[15] = #6000000 1'b0;
	B[15] = #3000000 1'b1;
	B[15] = #3000000 1'b0;
	B[15] = #6000000 1'b1;
	B[15] = #3000000 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b1;
	B[14] = #3000000 1'b0;
	B[14] = #3000000 1'b1;
	B[14] = #6000000 1'b0;
	B[14] = #21000000 1'b1;
	B[14] = #3000000 1'b0;
	B[14] = #12000000 1'b1;
	B[14] = #3000000 1'b0;
	B[14] = #3000000 1'b1;
	B[14] = #18000000 1'b0;
	B[14] = #15000000 1'b1;
	B[14] = #6000000 1'b0;
	B[14] = #3000000 1'b1;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b1;
	B[13] = #3000000 1'b0;
	B[13] = #3000000 1'b1;
	B[13] = #9000000 1'b0;
	B[13] = #3000000 1'b1;
	B[13] = #3000000 1'b0;
	B[13] = #18000000 1'b1;
	B[13] = #3000000 1'b0;
	B[13] = #12000000 1'b1;
	B[13] = #3000000 1'b0;
	B[13] = #3000000 1'b1;
	B[13] = #9000000 1'b0;
	B[13] = #6000000 1'b1;
	B[13] = #9000000 1'b0;
	B[13] = #3000000 1'b1;
	B[13] = #6000000 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
	B[12] = #3000000 1'b1;
	B[12] = #3000000 1'b0;
	B[12] = #3000000 1'b1;
	B[12] = #6000000 1'b0;
	B[12] = #6000000 1'b1;
	B[12] = #3000000 1'b0;
	B[12] = #9000000 1'b1;
	B[12] = #3000000 1'b0;
	B[12] = #9000000 1'b1;
	B[12] = #12000000 1'b0;
	B[12] = #9000000 1'b1;
	B[12] = #6000000 1'b0;
	B[12] = #12000000 1'b1;
	B[12] = #6000000 1'b0;
	B[12] = #3000000 1'b1;
	B[12] = #3000000 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
	B[11] = #3000000 1'b1;
	B[11] = #15000000 1'b0;
	B[11] = #3000000 1'b1;
	B[11] = #3000000 1'b0;
	B[11] = #3000000 1'b1;
	B[11] = #3000000 1'b0;
	B[11] = #3000000 1'b1;
	B[11] = #3000000 1'b0;
	B[11] = #3000000 1'b1;
	B[11] = #3000000 1'b0;
	B[11] = #3000000 1'b1;
	B[11] = #9000000 1'b0;
	B[11] = #3000000 1'b1;
	B[11] = #12000000 1'b0;
	B[11] = #15000000 1'b1;
	B[11] = #3000000 1'b0;
	B[11] = #3000000 1'b1;
	B[11] = #3000000 1'b0;
	B[11] = #6000000 1'b1;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b1;
	B[10] = #9000000 1'b0;
	B[10] = #3000000 1'b1;
	B[10] = #3000000 1'b0;
	B[10] = #3000000 1'b1;
	B[10] = #3000000 1'b0;
	B[10] = #3000000 1'b1;
	B[10] = #6000000 1'b0;
	B[10] = #6000000 1'b1;
	B[10] = #18000000 1'b0;
	B[10] = #6000000 1'b1;
	B[10] = #6000000 1'b0;
	B[10] = #9000000 1'b1;
	B[10] = #3000000 1'b0;
	B[10] = #9000000 1'b1;
	B[10] = #3000000 1'b0;
	B[10] = #3000000 1'b1;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
	B[9] = #3000000 1'b1;
	B[9] = #3000000 1'b0;
	B[9] = #3000000 1'b1;
	B[9] = #15000000 1'b0;
	B[9] = #3000000 1'b1;
	B[9] = #3000000 1'b0;
	B[9] = #3000000 1'b1;
	B[9] = #3000000 1'b0;
	B[9] = #3000000 1'b1;
	B[9] = #3000000 1'b0;
	B[9] = #3000000 1'b1;
	B[9] = #6000000 1'b0;
	B[9] = #3000000 1'b1;
	B[9] = #6000000 1'b0;
	B[9] = #9000000 1'b1;
	B[9] = #3000000 1'b0;
	B[9] = #9000000 1'b1;
	B[9] = #3000000 1'b0;
	B[9] = #3000000 1'b1;
	B[9] = #6000000 1'b0;
	B[9] = #3000000 1'b1;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b1;
	B[8] = #3000000 1'b0;
	B[8] = #6000000 1'b1;
	B[8] = #3000000 1'b0;
	B[8] = #3000000 1'b1;
	B[8] = #3000000 1'b0;
	B[8] = #3000000 1'b1;
	B[8] = #3000000 1'b0;
	B[8] = #3000000 1'b1;
	B[8] = #9000000 1'b0;
	B[8] = #18000000 1'b1;
	B[8] = #9000000 1'b0;
	B[8] = #3000000 1'b1;
	B[8] = #9000000 1'b0;
	B[8] = #3000000 1'b1;
	B[8] = #3000000 1'b0;
	B[8] = #3000000 1'b1;
	B[8] = #15000000 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b1;
	B[7] = #9000000 1'b0;
	B[7] = #3000000 1'b1;
	B[7] = #6000000 1'b0;
	B[7] = #12000000 1'b1;
	B[7] = #6000000 1'b0;
	B[7] = #6000000 1'b1;
	B[7] = #3000000 1'b0;
	B[7] = #3000000 1'b1;
	B[7] = #3000000 1'b0;
	B[7] = #6000000 1'b1;
	B[7] = #9000000 1'b0;
	B[7] = #6000000 1'b1;
	B[7] = #12000000 1'b0;
	B[7] = #6000000 1'b1;
	B[7] = #3000000 1'b0;
	B[7] = #6000000 1'b1;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b1;
	B[6] = #3000000 1'b0;
	B[6] = #12000000 1'b1;
	B[6] = #9000000 1'b0;
	B[6] = #3000000 1'b1;
	B[6] = #6000000 1'b0;
	B[6] = #6000000 1'b1;
	B[6] = #3000000 1'b0;
	B[6] = #6000000 1'b1;
	B[6] = #12000000 1'b0;
	B[6] = #6000000 1'b1;
	B[6] = #3000000 1'b0;
	B[6] = #3000000 1'b1;
	B[6] = #3000000 1'b0;
	B[6] = #9000000 1'b1;
	B[6] = #3000000 1'b0;
	B[6] = #3000000 1'b1;
	B[6] = #3000000 1'b0;
	B[6] = #6000000 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
	B[5] = #9000000 1'b0;
	B[5] = #3000000 1'b1;
	B[5] = #6000000 1'b0;
	B[5] = #6000000 1'b1;
	B[5] = #9000000 1'b0;
	B[5] = #3000000 1'b1;
	B[5] = #3000000 1'b0;
	B[5] = #9000000 1'b1;
	B[5] = #9000000 1'b0;
	B[5] = #3000000 1'b1;
	B[5] = #3000000 1'b0;
	B[5] = #3000000 1'b1;
	B[5] = #9000000 1'b0;
	B[5] = #3000000 1'b1;
	B[5] = #9000000 1'b0;
	B[5] = #3000000 1'b1;
	B[5] = #6000000 1'b0;
	B[5] = #3000000 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
	B[4] = #3000000 1'b0;
	B[4] = #6000000 1'b1;
	B[4] = #21000000 1'b0;
	B[4] = #3000000 1'b1;
	B[4] = #6000000 1'b0;
	B[4] = #3000000 1'b1;
	B[4] = #3000000 1'b0;
	B[4] = #6000000 1'b1;
	B[4] = #12000000 1'b0;
	B[4] = #3000000 1'b1;
	B[4] = #3000000 1'b0;
	B[4] = #6000000 1'b1;
	B[4] = #3000000 1'b0;
	B[4] = #6000000 1'b1;
	B[4] = #3000000 1'b0;
	B[4] = #3000000 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
	B[3] = #12000000 1'b1;
	B[3] = #3000000 1'b0;
	B[3] = #3000000 1'b1;
	B[3] = #9000000 1'b0;
	B[3] = #6000000 1'b1;
	B[3] = #6000000 1'b0;
	B[3] = #3000000 1'b1;
	B[3] = #3000000 1'b0;
	B[3] = #18000000 1'b1;
	B[3] = #6000000 1'b0;
	B[3] = #3000000 1'b1;
	B[3] = #3000000 1'b0;
	B[3] = #9000000 1'b1;
	B[3] = #3000000 1'b0;
	B[3] = #6000000 1'b1;
	B[3] = #3000000 1'b0;
	B[3] = #3000000 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #3000000 1'b1;
	B[2] = #6000000 1'b0;
	B[2] = #3000000 1'b1;
	B[2] = #18000000 1'b0;
	B[2] = #6000000 1'b1;
	B[2] = #6000000 1'b0;
	B[2] = #3000000 1'b1;
	B[2] = #9000000 1'b0;
	B[2] = #3000000 1'b1;
	B[2] = #6000000 1'b0;
	B[2] = #6000000 1'b1;
	B[2] = #9000000 1'b0;
	B[2] = #15000000 1'b1;
	B[2] = #6000000 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #9000000 1'b1;
	B[1] = #3000000 1'b0;
	B[1] = #3000000 1'b1;
	B[1] = #18000000 1'b0;
	B[1] = #3000000 1'b1;
	B[1] = #9000000 1'b0;
	B[1] = #3000000 1'b1;
	B[1] = #15000000 1'b0;
	B[1] = #24000000 1'b1;
	B[1] = #9000000 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
	B[0] = #18000000 1'b0;
	B[0] = #3000000 1'b1;
	B[0] = #6000000 1'b0;
	B[0] = #3000000 1'b1;
	B[0] = #6000000 1'b0;
	B[0] = #6000000 1'b1;
	B[0] = #3000000 1'b0;
	B[0] = #3000000 1'b1;
	B[0] = #12000000 1'b0;
	B[0] = #3000000 1'b1;
	B[0] = #3000000 1'b0;
	B[0] = #3000000 1'b1;
	B[0] = #18000000 1'b0;
	B[0] = #3000000 1'b1;
	B[0] = #6000000 1'b0;
end 

Multiplicacion_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.CLK(CLK),
	.sampler_tx(sampler)
);

Multiplicacion_vlg_check_tst tb_out(
	.Res(Res),
	.sampler_rx(sampler)
);
endmodule

