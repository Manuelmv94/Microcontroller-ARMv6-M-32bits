// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/08/2016 16:51:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RAM_BLOCK
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RAM_BLOCK_vlg_sample_tst(
	address,
	Clk,
	data,
	we,
	sampler_tx
);
input [31:0] address;
input  Clk;
input [31:0] data;
input  we;
output sampler_tx;

reg sample;
time current_time;
always @(address or Clk or data or we)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RAM_BLOCK_vlg_check_tst (
	data,
	sampler_rx
);
input [31:0] data;
input sampler_rx;

reg [31:0] data_expected;

reg [31:0] data_prev;

reg [31:0] data_expected_prev;

reg [31:0] last_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_prev = data;
end

// update expected /o prevs

always @(trigger)
begin
	data_expected_prev = data_expected;
end


// generate trigger
always @(data_expected or data)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data = %b | ",data_expected_prev);
	$display("| real data = %b | ",data_prev);
`endif
	if (
		( data_expected_prev[0] !== 1'bx ) && ( data_prev[0] !== data_expected_prev[0] )
		&& ((data_expected_prev[0] !== last_data_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[0] = data_expected_prev[0];
	end
	if (
		( data_expected_prev[1] !== 1'bx ) && ( data_prev[1] !== data_expected_prev[1] )
		&& ((data_expected_prev[1] !== last_data_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[1] = data_expected_prev[1];
	end
	if (
		( data_expected_prev[2] !== 1'bx ) && ( data_prev[2] !== data_expected_prev[2] )
		&& ((data_expected_prev[2] !== last_data_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[2] = data_expected_prev[2];
	end
	if (
		( data_expected_prev[3] !== 1'bx ) && ( data_prev[3] !== data_expected_prev[3] )
		&& ((data_expected_prev[3] !== last_data_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[3] = data_expected_prev[3];
	end
	if (
		( data_expected_prev[4] !== 1'bx ) && ( data_prev[4] !== data_expected_prev[4] )
		&& ((data_expected_prev[4] !== last_data_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[4] = data_expected_prev[4];
	end
	if (
		( data_expected_prev[5] !== 1'bx ) && ( data_prev[5] !== data_expected_prev[5] )
		&& ((data_expected_prev[5] !== last_data_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[5] = data_expected_prev[5];
	end
	if (
		( data_expected_prev[6] !== 1'bx ) && ( data_prev[6] !== data_expected_prev[6] )
		&& ((data_expected_prev[6] !== last_data_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[6] = data_expected_prev[6];
	end
	if (
		( data_expected_prev[7] !== 1'bx ) && ( data_prev[7] !== data_expected_prev[7] )
		&& ((data_expected_prev[7] !== last_data_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[7] = data_expected_prev[7];
	end
	if (
		( data_expected_prev[8] !== 1'bx ) && ( data_prev[8] !== data_expected_prev[8] )
		&& ((data_expected_prev[8] !== last_data_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[8] = data_expected_prev[8];
	end
	if (
		( data_expected_prev[9] !== 1'bx ) && ( data_prev[9] !== data_expected_prev[9] )
		&& ((data_expected_prev[9] !== last_data_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[9] = data_expected_prev[9];
	end
	if (
		( data_expected_prev[10] !== 1'bx ) && ( data_prev[10] !== data_expected_prev[10] )
		&& ((data_expected_prev[10] !== last_data_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[10] = data_expected_prev[10];
	end
	if (
		( data_expected_prev[11] !== 1'bx ) && ( data_prev[11] !== data_expected_prev[11] )
		&& ((data_expected_prev[11] !== last_data_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[11] = data_expected_prev[11];
	end
	if (
		( data_expected_prev[12] !== 1'bx ) && ( data_prev[12] !== data_expected_prev[12] )
		&& ((data_expected_prev[12] !== last_data_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[12] = data_expected_prev[12];
	end
	if (
		( data_expected_prev[13] !== 1'bx ) && ( data_prev[13] !== data_expected_prev[13] )
		&& ((data_expected_prev[13] !== last_data_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[13] = data_expected_prev[13];
	end
	if (
		( data_expected_prev[14] !== 1'bx ) && ( data_prev[14] !== data_expected_prev[14] )
		&& ((data_expected_prev[14] !== last_data_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[14] = data_expected_prev[14];
	end
	if (
		( data_expected_prev[15] !== 1'bx ) && ( data_prev[15] !== data_expected_prev[15] )
		&& ((data_expected_prev[15] !== last_data_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[15] = data_expected_prev[15];
	end
	if (
		( data_expected_prev[16] !== 1'bx ) && ( data_prev[16] !== data_expected_prev[16] )
		&& ((data_expected_prev[16] !== last_data_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[16] = data_expected_prev[16];
	end
	if (
		( data_expected_prev[17] !== 1'bx ) && ( data_prev[17] !== data_expected_prev[17] )
		&& ((data_expected_prev[17] !== last_data_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[17] = data_expected_prev[17];
	end
	if (
		( data_expected_prev[18] !== 1'bx ) && ( data_prev[18] !== data_expected_prev[18] )
		&& ((data_expected_prev[18] !== last_data_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[18] = data_expected_prev[18];
	end
	if (
		( data_expected_prev[19] !== 1'bx ) && ( data_prev[19] !== data_expected_prev[19] )
		&& ((data_expected_prev[19] !== last_data_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[19] = data_expected_prev[19];
	end
	if (
		( data_expected_prev[20] !== 1'bx ) && ( data_prev[20] !== data_expected_prev[20] )
		&& ((data_expected_prev[20] !== last_data_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[20] = data_expected_prev[20];
	end
	if (
		( data_expected_prev[21] !== 1'bx ) && ( data_prev[21] !== data_expected_prev[21] )
		&& ((data_expected_prev[21] !== last_data_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[21] = data_expected_prev[21];
	end
	if (
		( data_expected_prev[22] !== 1'bx ) && ( data_prev[22] !== data_expected_prev[22] )
		&& ((data_expected_prev[22] !== last_data_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[22] = data_expected_prev[22];
	end
	if (
		( data_expected_prev[23] !== 1'bx ) && ( data_prev[23] !== data_expected_prev[23] )
		&& ((data_expected_prev[23] !== last_data_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[23] = data_expected_prev[23];
	end
	if (
		( data_expected_prev[24] !== 1'bx ) && ( data_prev[24] !== data_expected_prev[24] )
		&& ((data_expected_prev[24] !== last_data_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[24] = data_expected_prev[24];
	end
	if (
		( data_expected_prev[25] !== 1'bx ) && ( data_prev[25] !== data_expected_prev[25] )
		&& ((data_expected_prev[25] !== last_data_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[25] = data_expected_prev[25];
	end
	if (
		( data_expected_prev[26] !== 1'bx ) && ( data_prev[26] !== data_expected_prev[26] )
		&& ((data_expected_prev[26] !== last_data_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[26] = data_expected_prev[26];
	end
	if (
		( data_expected_prev[27] !== 1'bx ) && ( data_prev[27] !== data_expected_prev[27] )
		&& ((data_expected_prev[27] !== last_data_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[27] = data_expected_prev[27];
	end
	if (
		( data_expected_prev[28] !== 1'bx ) && ( data_prev[28] !== data_expected_prev[28] )
		&& ((data_expected_prev[28] !== last_data_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[28] = data_expected_prev[28];
	end
	if (
		( data_expected_prev[29] !== 1'bx ) && ( data_prev[29] !== data_expected_prev[29] )
		&& ((data_expected_prev[29] !== last_data_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[29] = data_expected_prev[29];
	end
	if (
		( data_expected_prev[30] !== 1'bx ) && ( data_prev[30] !== data_expected_prev[30] )
		&& ((data_expected_prev[30] !== last_data_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[30] = data_expected_prev[30];
	end
	if (
		( data_expected_prev[31] !== 1'bx ) && ( data_prev[31] !== data_expected_prev[31] )
		&& ((data_expected_prev[31] !== last_data_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_exp[31] = data_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RAM_BLOCK_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] address;
reg Clk;
reg [31:0] treg_data;
reg we;
// wires                                               
wire [31:0] data;

wire sampler;                             

// assign statements (if any)                          
assign data = treg_data;
RAM_BLOCK i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.Clk(Clk),
	.data(data),
	.we(we)
);

// Clk
always
begin
	Clk = 1'b0;
	Clk = #2500000 1'b1;
	#2500000;
end 
// address[ 31 ]
initial
begin
	address[31] = 1'b0;
end 
// address[ 30 ]
initial
begin
	address[30] = 1'b0;
end 
// address[ 29 ]
initial
begin
	address[29] = 1'b0;
end 
// address[ 28 ]
initial
begin
	address[28] = 1'b0;
end 
// address[ 27 ]
initial
begin
	address[27] = 1'b0;
end 
// address[ 26 ]
initial
begin
	address[26] = 1'b0;
end 
// address[ 25 ]
initial
begin
	address[25] = 1'b0;
end 
// address[ 24 ]
initial
begin
	address[24] = 1'b0;
end 
// address[ 23 ]
initial
begin
	address[23] = 1'b0;
end 
// address[ 22 ]
initial
begin
	address[22] = 1'b0;
end 
// address[ 21 ]
initial
begin
	address[21] = 1'b0;
end 
// address[ 20 ]
initial
begin
	address[20] = 1'b0;
end 
// address[ 19 ]
initial
begin
	address[19] = 1'b0;
end 
// address[ 18 ]
initial
begin
	address[18] = 1'b0;
end 
// address[ 17 ]
initial
begin
	address[17] = 1'b0;
end 
// address[ 16 ]
initial
begin
	address[16] = 1'b0;
end 
// address[ 15 ]
initial
begin
	address[15] = 1'b0;
end 
// address[ 14 ]
initial
begin
	address[14] = 1'b0;
end 
// address[ 13 ]
initial
begin
	address[13] = 1'b0;
end 
// address[ 12 ]
initial
begin
	address[12] = 1'b0;
end 
// address[ 11 ]
initial
begin
	address[11] = 1'b0;
end 
// address[ 10 ]
initial
begin
	address[10] = 1'b0;
end 
// address[ 9 ]
initial
begin
	address[9] = 1'b0;
end 
// address[ 8 ]
initial
begin
	address[8] = 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
	address[3] = #40000000 1'b1;
	address[3] = #9920000 1'b0;
	address[3] = #40000000 1'b1;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b0;
	address[2] = #20000000 1'b1;
	address[2] = #20000000 1'b0;
	address[2] = #29920000 1'b1;
	address[2] = #20000000 1'b0;
end 
// address[ 1 ]
initial
begin
	repeat(2)
	begin
		address[1] = 1'b0;
		address[1] = #10000000 1'b1;
		# 10000000;
	end
	address[1] = 1'b0;
	address[1] = #19920000 1'b1;
	address[1] = #10000000 1'b0;
	address[1] = #10000000 1'b1;
	address[1] = #10000000 1'b0;
	address[1] = #10000000 1'b1;
end 
// address[ 0 ]
initial
begin
	repeat(4)
	begin
		address[0] = 1'b0;
		address[0] = #5000000 1'b1;
		# 5000000;
	end
	address[0] = 1'b0;
	address[0] = #5000000 1'b1;
	# 4920000;
	repeat(5)
	begin
		address[0] = 1'b0;
		address[0] = #5000000 1'b1;
		# 5000000;
	end
	address[0] = 1'b0;
end 

// we
initial
begin
	we = 1'b1;
	we = #49920000 1'b0;
end 
// data[ 31 ]
initial
begin
	treg_data[31] = 1'b1;
	treg_data[31] = #20000000 1'b0;
	treg_data[31] = #5000000 1'b1;
	treg_data[31] = #10000000 1'b0;
	treg_data[31] = #5000000 1'b1;
	treg_data[31] = #9920000 1'bZ;
end 
// data[ 30 ]
initial
begin
	treg_data[30] = 1'b1;
	treg_data[30] = #5000000 1'b0;
	treg_data[30] = #5000000 1'b1;
	treg_data[30] = #5000000 1'b0;
	treg_data[30] = #34920000 1'bZ;
end 
// data[ 29 ]
initial
begin
	treg_data[29] = 1'b0;
	treg_data[29] = #10000000 1'b1;
	treg_data[29] = #5000000 1'b0;
	treg_data[29] = #30000000 1'b1;
	treg_data[29] = #4920000 1'bZ;
end 
// data[ 28 ]
initial
begin
	treg_data[28] = 1'b0;
	treg_data[28] = #5000000 1'b1;
	treg_data[28] = #15000000 1'b0;
	treg_data[28] = #5000000 1'b1;
	treg_data[28] = #5000000 1'b0;
	treg_data[28] = #5000000 1'b1;
	treg_data[28] = #5000000 1'b0;
	treg_data[28] = #5000000 1'b1;
	treg_data[28] = #4920000 1'bZ;
end 
// data[ 27 ]
initial
begin
	treg_data[27] = 1'b1;
	treg_data[27] = #20000000 1'b0;
	treg_data[27] = #5000000 1'b1;
	treg_data[27] = #5000000 1'b0;
	treg_data[27] = #5000000 1'b1;
	treg_data[27] = #5000000 1'b0;
	treg_data[27] = #5000000 1'b1;
	treg_data[27] = #4920000 1'bZ;
end 
// data[ 26 ]
initial
begin
	treg_data[26] = 1'b0;
	treg_data[26] = #15000000 1'b1;
	treg_data[26] = #5000000 1'b0;
	treg_data[26] = #10000000 1'b1;
	treg_data[26] = #10000000 1'b0;
	treg_data[26] = #5000000 1'b1;
	treg_data[26] = #4920000 1'bZ;
end 
// data[ 25 ]
initial
begin
	treg_data[25] = 1'b1;
	treg_data[25] = #5000000 1'b0;
	treg_data[25] = #5000000 1'b1;
	treg_data[25] = #10000000 1'b0;
	treg_data[25] = #5000000 1'b1;
	treg_data[25] = #15000000 1'b0;
	treg_data[25] = #9920000 1'bZ;
end 
// data[ 24 ]
initial
begin
	treg_data[24] = 1'b0;
	treg_data[24] = #5000000 1'b1;
	treg_data[24] = #10000000 1'b0;
	treg_data[24] = #20000000 1'b1;
	treg_data[24] = #5000000 1'b0;
	treg_data[24] = #5000000 1'b1;
	treg_data[24] = #4920000 1'bZ;
end 
// data[ 23 ]
initial
begin
	treg_data[23] = 1'b0;
	treg_data[23] = #5000000 1'b1;
	treg_data[23] = #10000000 1'b0;
	treg_data[23] = #5000000 1'b1;
	treg_data[23] = #5000000 1'b0;
	treg_data[23] = #15000000 1'b1;
	treg_data[23] = #9920000 1'bZ;
end 
// data[ 22 ]
initial
begin
	treg_data[22] = 1'b0;
	treg_data[22] = #5000000 1'b1;
	treg_data[22] = #15000000 1'b0;
	treg_data[22] = #10000000 1'b1;
	treg_data[22] = #10000000 1'b0;
	treg_data[22] = #9920000 1'bZ;
end 
// data[ 21 ]
initial
begin
	treg_data[21] = 1'b1;
	treg_data[21] = #5000000 1'b0;
	treg_data[21] = #5000000 1'b1;
	treg_data[21] = #20000000 1'b0;
	treg_data[21] = #5000000 1'b1;
	treg_data[21] = #14920000 1'bZ;
end 
// data[ 20 ]
initial
begin
	treg_data[20] = 1'b0;
	treg_data[20] = #5000000 1'b1;
	treg_data[20] = #20000000 1'b0;
	treg_data[20] = #5000000 1'b1;
	treg_data[20] = #19920000 1'bZ;
end 
// data[ 19 ]
initial
begin
	treg_data[19] = 1'b1;
	treg_data[19] = #10000000 1'b0;
	treg_data[19] = #10000000 1'b1;
	treg_data[19] = #5000000 1'b0;
	treg_data[19] = #5000000 1'b1;
	treg_data[19] = #5000000 1'b0;
	treg_data[19] = #5000000 1'b1;
	treg_data[19] = #9920000 1'bZ;
end 
// data[ 18 ]
initial
begin
	treg_data[18] = 1'b1;
	treg_data[18] = #5000000 1'b0;
	treg_data[18] = #15000000 1'b1;
	treg_data[18] = #15000000 1'b0;
	treg_data[18] = #5000000 1'b1;
	treg_data[18] = #5000000 1'b0;
	treg_data[18] = #4920000 1'bZ;
end 
// data[ 17 ]
initial
begin
	treg_data[17] = 1'b0;
	treg_data[17] = #5000000 1'b1;
	treg_data[17] = #10000000 1'b0;
	treg_data[17] = #25000000 1'b1;
	treg_data[17] = #5000000 1'b0;
	treg_data[17] = #4920000 1'bZ;
end 
// data[ 16 ]
initial
begin
	treg_data[16] = 1'b1;
	treg_data[16] = #5000000 1'b0;
	treg_data[16] = #10000000 1'b1;
	treg_data[16] = #5000000 1'b0;
	treg_data[16] = #5000000 1'b1;
	treg_data[16] = #5000000 1'b0;
	treg_data[16] = #5000000 1'b1;
	treg_data[16] = #14920000 1'bZ;
end 
// data[ 15 ]
initial
begin
	treg_data[15] = 1'b0;
	treg_data[15] = #15000000 1'b1;
	treg_data[15] = #15000000 1'b0;
	treg_data[15] = #5000000 1'b1;
	treg_data[15] = #5000000 1'b0;
	treg_data[15] = #5000000 1'b1;
	treg_data[15] = #4920000 1'bZ;
end 
// data[ 14 ]
initial
begin
	treg_data[14] = 1'b1;
	treg_data[14] = #5000000 1'b0;
	treg_data[14] = #15000000 1'b1;
	treg_data[14] = #5000000 1'b0;
	treg_data[14] = #10000000 1'b1;
	treg_data[14] = #10000000 1'b0;
	treg_data[14] = #4920000 1'bZ;
end 
// data[ 13 ]
initial
begin
	treg_data[13] = 1'b0;
	treg_data[13] = #5000000 1'b1;
	treg_data[13] = #5000000 1'b0;
	treg_data[13] = #10000000 1'b1;
	treg_data[13] = #5000000 1'b0;
	treg_data[13] = #5000000 1'b1;
	treg_data[13] = #5000000 1'b0;
	treg_data[13] = #5000000 1'b1;
	treg_data[13] = #9920000 1'bZ;
end 
// data[ 12 ]
initial
begin
	treg_data[12] = 1'b0;
	treg_data[12] = #5000000 1'b1;
	treg_data[12] = #10000000 1'b0;
	treg_data[12] = #15000000 1'b1;
	treg_data[12] = #10000000 1'b0;
	treg_data[12] = #5000000 1'b1;
	treg_data[12] = #4920000 1'bZ;
end 
// data[ 11 ]
initial
begin
	treg_data[11] = 1'b0;
	treg_data[11] = #5000000 1'b1;
	treg_data[11] = #40000000 1'b0;
	treg_data[11] = #4920000 1'bZ;
end 
// data[ 10 ]
initial
begin
	treg_data[10] = 1'b0;
	treg_data[10] = #5000000 1'b1;
	treg_data[10] = #10000000 1'b0;
	treg_data[10] = #15000000 1'b1;
	treg_data[10] = #10000000 1'b0;
	treg_data[10] = #5000000 1'b1;
	treg_data[10] = #4920000 1'bZ;
end 
// data[ 9 ]
initial
begin
	treg_data[9] = 1'b0;
	treg_data[9] = #20000000 1'b1;
	treg_data[9] = #5000000 1'b0;
	treg_data[9] = #20000000 1'b1;
	treg_data[9] = #4920000 1'bZ;
end 
// data[ 8 ]
initial
begin
	treg_data[8] = 1'b0;
	treg_data[8] = #15000000 1'b1;
	treg_data[8] = #20000000 1'b0;
	treg_data[8] = #14920000 1'bZ;
end 
// data[ 7 ]
initial
begin
	treg_data[7] = 1'b0;
	treg_data[7] = #5000000 1'b1;
	treg_data[7] = #5000000 1'b0;
	treg_data[7] = #10000000 1'b1;
	treg_data[7] = #10000000 1'b0;
	treg_data[7] = #5000000 1'b1;
	treg_data[7] = #10000000 1'b0;
	treg_data[7] = #4920000 1'bZ;
end 
// data[ 6 ]
initial
begin
	treg_data[6] = 1'b1;
	treg_data[6] = #5000000 1'b0;
	treg_data[6] = #15000000 1'b1;
	treg_data[6] = #5000000 1'b0;
	treg_data[6] = #5000000 1'b1;
	treg_data[6] = #10000000 1'b0;
	treg_data[6] = #9920000 1'bZ;
end 
// data[ 5 ]
initial
begin
	treg_data[5] = 1'b0;
	treg_data[5] = #10000000 1'b1;
	treg_data[5] = #10000000 1'b0;
	treg_data[5] = #20000000 1'b1;
	treg_data[5] = #5000000 1'b0;
	treg_data[5] = #4920000 1'bZ;
end 
// data[ 4 ]
initial
begin
	treg_data[4] = 1'b0;
	treg_data[4] = #5000000 1'b1;
	treg_data[4] = #25000000 1'b0;
	treg_data[4] = #10000000 1'b1;
	treg_data[4] = #5000000 1'b0;
	treg_data[4] = #4920000 1'bZ;
end 
// data[ 3 ]
initial
begin
	treg_data[3] = 1'b0;
	treg_data[3] = #5000000 1'b1;
	treg_data[3] = #10000000 1'b0;
	treg_data[3] = #5000000 1'b1;
	treg_data[3] = #5000000 1'b0;
	treg_data[3] = #5000000 1'b1;
	treg_data[3] = #5000000 1'b0;
	treg_data[3] = #10000000 1'b1;
	treg_data[3] = #4920000 1'bZ;
end 
// data[ 2 ]
initial
begin
	treg_data[2] = 1'b1;
	treg_data[2] = #10000000 1'b0;
	treg_data[2] = #10000000 1'b1;
	treg_data[2] = #10000000 1'b0;
	treg_data[2] = #10000000 1'b1;
	treg_data[2] = #9920000 1'bZ;
end 
// data[ 1 ]
initial
begin
	treg_data[1] = 1'b0;
	treg_data[1] = #5000000 1'b1;
	treg_data[1] = #10000000 1'b0;
	treg_data[1] = #5000000 1'b1;
	treg_data[1] = #10000000 1'b0;
	treg_data[1] = #15000000 1'b1;
	treg_data[1] = #4920000 1'bZ;
end 
// data[ 0 ]
initial
begin
	treg_data[0] = 1'b1;
	treg_data[0] = #10000000 1'b0;
	treg_data[0] = #5000000 1'b1;
	treg_data[0] = #5000000 1'b0;
	treg_data[0] = #15000000 1'b1;
	treg_data[0] = #5000000 1'b0;
	treg_data[0] = #5000000 1'b1;
	treg_data[0] = #4920000 1'bZ;
end 

RAM_BLOCK_vlg_sample_tst tb_sample (
	.address(address),
	.Clk(Clk),
	.data(data),
	.we(we),
	.sampler_tx(sampler)
);

RAM_BLOCK_vlg_check_tst tb_out(
	.data(data),
	.sampler_rx(sampler)
);
endmodule

